# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkloadArgs', 'Workload']

@pulumi.input_type
class WorkloadArgs:
    def __init__(__self__, *,
                 authority_id: pulumi.Input[str],
                 certificate_data: pulumi.Input['WorkloadCertificateDataArgs'],
                 certificate_info: pulumi.Input['WorkloadCertificateInfoArgs'],
                 device_collection_slug: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 key_info: pulumi.Input['WorkloadKeyInfoArgs'],
                 slug: pulumi.Input[str],
                 hooks: Optional[pulumi.Input['WorkloadHooksArgs']] = None,
                 reload_info: Optional[pulumi.Input['WorkloadReloadInfoArgs']] = None,
                 workload_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Workload resource.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the workload.
        :param pulumi.Input['WorkloadCertificateInfoArgs'] certificate_info: Details on a managed certificate.
        :param pulumi.Input[str] device_collection_slug: Slug of the device collection the workload will be added to.
        :param pulumi.Input[str] display_name: A friendly name for the workload. Also used as the Common Name, if no static SANs are provided.
        :param pulumi.Input['WorkloadKeyInfoArgs'] key_info: The attributes of the cryptographic key.
        :param pulumi.Input[str] slug: Used as the identifier for the workload.
        :param pulumi.Input['WorkloadHooksArgs'] hooks: The collection of commands to run when a certificate for a managed endpoint is signed or renewed.
        :param pulumi.Input['WorkloadReloadInfoArgs'] reload_info: The properties used to reload a service.
        :param pulumi.Input[str] workload_type: The type of workload being deployed. Possible values are `etcd` `generic` `git` `grafana` `haproxy` `httpd` `kafka`
               `mysql` `nginx` `nodejs` `postgres` `redis` `tomcat` and `zookeeper`. Use `generic` for a basic certificate workload.
        """
        pulumi.set(__self__, "authority_id", authority_id)
        pulumi.set(__self__, "certificate_data", certificate_data)
        pulumi.set(__self__, "certificate_info", certificate_info)
        pulumi.set(__self__, "device_collection_slug", device_collection_slug)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "key_info", key_info)
        pulumi.set(__self__, "slug", slug)
        if hooks is not None:
            pulumi.set(__self__, "hooks", hooks)
        if reload_info is not None:
            pulumi.set(__self__, "reload_info", reload_info)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> pulumi.Input[str]:
        """
        A UUID identifying the authority to issue certificates for the workload.
        """
        return pulumi.get(self, "authority_id")

    @authority_id.setter
    def authority_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "authority_id", value)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> pulumi.Input['WorkloadCertificateDataArgs']:
        return pulumi.get(self, "certificate_data")

    @certificate_data.setter
    def certificate_data(self, value: pulumi.Input['WorkloadCertificateDataArgs']):
        pulumi.set(self, "certificate_data", value)

    @property
    @pulumi.getter(name="certificateInfo")
    def certificate_info(self) -> pulumi.Input['WorkloadCertificateInfoArgs']:
        """
        Details on a managed certificate.
        """
        return pulumi.get(self, "certificate_info")

    @certificate_info.setter
    def certificate_info(self, value: pulumi.Input['WorkloadCertificateInfoArgs']):
        pulumi.set(self, "certificate_info", value)

    @property
    @pulumi.getter(name="deviceCollectionSlug")
    def device_collection_slug(self) -> pulumi.Input[str]:
        """
        Slug of the device collection the workload will be added to.
        """
        return pulumi.get(self, "device_collection_slug")

    @device_collection_slug.setter
    def device_collection_slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_collection_slug", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        A friendly name for the workload. Also used as the Common Name, if no static SANs are provided.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="keyInfo")
    def key_info(self) -> pulumi.Input['WorkloadKeyInfoArgs']:
        """
        The attributes of the cryptographic key.
        """
        return pulumi.get(self, "key_info")

    @key_info.setter
    def key_info(self, value: pulumi.Input['WorkloadKeyInfoArgs']):
        pulumi.set(self, "key_info", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        """
        Used as the identifier for the workload.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def hooks(self) -> Optional[pulumi.Input['WorkloadHooksArgs']]:
        """
        The collection of commands to run when a certificate for a managed endpoint is signed or renewed.
        """
        return pulumi.get(self, "hooks")

    @hooks.setter
    def hooks(self, value: Optional[pulumi.Input['WorkloadHooksArgs']]):
        pulumi.set(self, "hooks", value)

    @property
    @pulumi.getter(name="reloadInfo")
    def reload_info(self) -> Optional[pulumi.Input['WorkloadReloadInfoArgs']]:
        """
        The properties used to reload a service.
        """
        return pulumi.get(self, "reload_info")

    @reload_info.setter
    def reload_info(self, value: Optional[pulumi.Input['WorkloadReloadInfoArgs']]):
        pulumi.set(self, "reload_info", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of workload being deployed. Possible values are `etcd` `generic` `git` `grafana` `haproxy` `httpd` `kafka`
        `mysql` `nginx` `nodejs` `postgres` `redis` `tomcat` and `zookeeper`. Use `generic` for a basic certificate workload.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_type", value)


@pulumi.input_type
class _WorkloadState:
    def __init__(__self__, *,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 certificate_data: Optional[pulumi.Input['WorkloadCertificateDataArgs']] = None,
                 certificate_info: Optional[pulumi.Input['WorkloadCertificateInfoArgs']] = None,
                 device_collection_slug: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 hooks: Optional[pulumi.Input['WorkloadHooksArgs']] = None,
                 key_info: Optional[pulumi.Input['WorkloadKeyInfoArgs']] = None,
                 reload_info: Optional[pulumi.Input['WorkloadReloadInfoArgs']] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Workload resources.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the workload.
        :param pulumi.Input['WorkloadCertificateInfoArgs'] certificate_info: Details on a managed certificate.
        :param pulumi.Input[str] device_collection_slug: Slug of the device collection the workload will be added to.
        :param pulumi.Input[str] display_name: A friendly name for the workload. Also used as the Common Name, if no static SANs are provided.
        :param pulumi.Input['WorkloadHooksArgs'] hooks: The collection of commands to run when a certificate for a managed endpoint is signed or renewed.
        :param pulumi.Input['WorkloadKeyInfoArgs'] key_info: The attributes of the cryptographic key.
        :param pulumi.Input['WorkloadReloadInfoArgs'] reload_info: The properties used to reload a service.
        :param pulumi.Input[str] slug: Used as the identifier for the workload.
        :param pulumi.Input[str] workload_type: The type of workload being deployed. Possible values are `etcd` `generic` `git` `grafana` `haproxy` `httpd` `kafka`
               `mysql` `nginx` `nodejs` `postgres` `redis` `tomcat` and `zookeeper`. Use `generic` for a basic certificate workload.
        """
        if authority_id is not None:
            pulumi.set(__self__, "authority_id", authority_id)
        if certificate_data is not None:
            pulumi.set(__self__, "certificate_data", certificate_data)
        if certificate_info is not None:
            pulumi.set(__self__, "certificate_info", certificate_info)
        if device_collection_slug is not None:
            pulumi.set(__self__, "device_collection_slug", device_collection_slug)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if hooks is not None:
            pulumi.set(__self__, "hooks", hooks)
        if key_info is not None:
            pulumi.set(__self__, "key_info", key_info)
        if reload_info is not None:
            pulumi.set(__self__, "reload_info", reload_info)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> Optional[pulumi.Input[str]]:
        """
        A UUID identifying the authority to issue certificates for the workload.
        """
        return pulumi.get(self, "authority_id")

    @authority_id.setter
    def authority_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authority_id", value)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> Optional[pulumi.Input['WorkloadCertificateDataArgs']]:
        return pulumi.get(self, "certificate_data")

    @certificate_data.setter
    def certificate_data(self, value: Optional[pulumi.Input['WorkloadCertificateDataArgs']]):
        pulumi.set(self, "certificate_data", value)

    @property
    @pulumi.getter(name="certificateInfo")
    def certificate_info(self) -> Optional[pulumi.Input['WorkloadCertificateInfoArgs']]:
        """
        Details on a managed certificate.
        """
        return pulumi.get(self, "certificate_info")

    @certificate_info.setter
    def certificate_info(self, value: Optional[pulumi.Input['WorkloadCertificateInfoArgs']]):
        pulumi.set(self, "certificate_info", value)

    @property
    @pulumi.getter(name="deviceCollectionSlug")
    def device_collection_slug(self) -> Optional[pulumi.Input[str]]:
        """
        Slug of the device collection the workload will be added to.
        """
        return pulumi.get(self, "device_collection_slug")

    @device_collection_slug.setter
    def device_collection_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_collection_slug", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        A friendly name for the workload. Also used as the Common Name, if no static SANs are provided.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def hooks(self) -> Optional[pulumi.Input['WorkloadHooksArgs']]:
        """
        The collection of commands to run when a certificate for a managed endpoint is signed or renewed.
        """
        return pulumi.get(self, "hooks")

    @hooks.setter
    def hooks(self, value: Optional[pulumi.Input['WorkloadHooksArgs']]):
        pulumi.set(self, "hooks", value)

    @property
    @pulumi.getter(name="keyInfo")
    def key_info(self) -> Optional[pulumi.Input['WorkloadKeyInfoArgs']]:
        """
        The attributes of the cryptographic key.
        """
        return pulumi.get(self, "key_info")

    @key_info.setter
    def key_info(self, value: Optional[pulumi.Input['WorkloadKeyInfoArgs']]):
        pulumi.set(self, "key_info", value)

    @property
    @pulumi.getter(name="reloadInfo")
    def reload_info(self) -> Optional[pulumi.Input['WorkloadReloadInfoArgs']]:
        """
        The properties used to reload a service.
        """
        return pulumi.get(self, "reload_info")

    @reload_info.setter
    def reload_info(self, value: Optional[pulumi.Input['WorkloadReloadInfoArgs']]):
        pulumi.set(self, "reload_info", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        Used as the identifier for the workload.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of workload being deployed. Possible values are `etcd` `generic` `git` `grafana` `haproxy` `httpd` `kafka`
        `mysql` `nginx` `nodejs` `postgres` `redis` `tomcat` and `zookeeper`. Use `generic` for a basic certificate workload.
        """
        return pulumi.get(self, "workload_type")

    @workload_type.setter
    def workload_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_type", value)


class Workload(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 certificate_data: Optional[pulumi.Input[Union['WorkloadCertificateDataArgs', 'WorkloadCertificateDataArgsDict']]] = None,
                 certificate_info: Optional[pulumi.Input[Union['WorkloadCertificateInfoArgs', 'WorkloadCertificateInfoArgsDict']]] = None,
                 device_collection_slug: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 hooks: Optional[pulumi.Input[Union['WorkloadHooksArgs', 'WorkloadHooksArgsDict']]] = None,
                 key_info: Optional[pulumi.Input[Union['WorkloadKeyInfoArgs', 'WorkloadKeyInfoArgsDict']]] = None,
                 reload_info: Optional[pulumi.Input[Union['WorkloadReloadInfoArgs', 'WorkloadReloadInfoArgsDict']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Workload resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the workload.
        :param pulumi.Input[Union['WorkloadCertificateInfoArgs', 'WorkloadCertificateInfoArgsDict']] certificate_info: Details on a managed certificate.
        :param pulumi.Input[str] device_collection_slug: Slug of the device collection the workload will be added to.
        :param pulumi.Input[str] display_name: A friendly name for the workload. Also used as the Common Name, if no static SANs are provided.
        :param pulumi.Input[Union['WorkloadHooksArgs', 'WorkloadHooksArgsDict']] hooks: The collection of commands to run when a certificate for a managed endpoint is signed or renewed.
        :param pulumi.Input[Union['WorkloadKeyInfoArgs', 'WorkloadKeyInfoArgsDict']] key_info: The attributes of the cryptographic key.
        :param pulumi.Input[Union['WorkloadReloadInfoArgs', 'WorkloadReloadInfoArgsDict']] reload_info: The properties used to reload a service.
        :param pulumi.Input[str] slug: Used as the identifier for the workload.
        :param pulumi.Input[str] workload_type: The type of workload being deployed. Possible values are `etcd` `generic` `git` `grafana` `haproxy` `httpd` `kafka`
               `mysql` `nginx` `nodejs` `postgres` `redis` `tomcat` and `zookeeper`. Use `generic` for a basic certificate workload.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkloadArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Workload resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WorkloadArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkloadArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 certificate_data: Optional[pulumi.Input[Union['WorkloadCertificateDataArgs', 'WorkloadCertificateDataArgsDict']]] = None,
                 certificate_info: Optional[pulumi.Input[Union['WorkloadCertificateInfoArgs', 'WorkloadCertificateInfoArgsDict']]] = None,
                 device_collection_slug: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 hooks: Optional[pulumi.Input[Union['WorkloadHooksArgs', 'WorkloadHooksArgsDict']]] = None,
                 key_info: Optional[pulumi.Input[Union['WorkloadKeyInfoArgs', 'WorkloadKeyInfoArgsDict']]] = None,
                 reload_info: Optional[pulumi.Input[Union['WorkloadReloadInfoArgs', 'WorkloadReloadInfoArgsDict']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 workload_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkloadArgs.__new__(WorkloadArgs)

            if authority_id is None and not opts.urn:
                raise TypeError("Missing required property 'authority_id'")
            __props__.__dict__["authority_id"] = authority_id
            if certificate_data is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_data'")
            __props__.__dict__["certificate_data"] = certificate_data
            if certificate_info is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_info'")
            __props__.__dict__["certificate_info"] = certificate_info
            if device_collection_slug is None and not opts.urn:
                raise TypeError("Missing required property 'device_collection_slug'")
            __props__.__dict__["device_collection_slug"] = device_collection_slug
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["hooks"] = hooks
            if key_info is None and not opts.urn:
                raise TypeError("Missing required property 'key_info'")
            __props__.__dict__["key_info"] = key_info
            __props__.__dict__["reload_info"] = reload_info
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            __props__.__dict__["workload_type"] = workload_type
        super(Workload, __self__).__init__(
            'smallstep:index/workload:Workload',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authority_id: Optional[pulumi.Input[str]] = None,
            certificate_data: Optional[pulumi.Input[Union['WorkloadCertificateDataArgs', 'WorkloadCertificateDataArgsDict']]] = None,
            certificate_info: Optional[pulumi.Input[Union['WorkloadCertificateInfoArgs', 'WorkloadCertificateInfoArgsDict']]] = None,
            device_collection_slug: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            hooks: Optional[pulumi.Input[Union['WorkloadHooksArgs', 'WorkloadHooksArgsDict']]] = None,
            key_info: Optional[pulumi.Input[Union['WorkloadKeyInfoArgs', 'WorkloadKeyInfoArgsDict']]] = None,
            reload_info: Optional[pulumi.Input[Union['WorkloadReloadInfoArgs', 'WorkloadReloadInfoArgsDict']]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            workload_type: Optional[pulumi.Input[str]] = None) -> 'Workload':
        """
        Get an existing Workload resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the workload.
        :param pulumi.Input[Union['WorkloadCertificateInfoArgs', 'WorkloadCertificateInfoArgsDict']] certificate_info: Details on a managed certificate.
        :param pulumi.Input[str] device_collection_slug: Slug of the device collection the workload will be added to.
        :param pulumi.Input[str] display_name: A friendly name for the workload. Also used as the Common Name, if no static SANs are provided.
        :param pulumi.Input[Union['WorkloadHooksArgs', 'WorkloadHooksArgsDict']] hooks: The collection of commands to run when a certificate for a managed endpoint is signed or renewed.
        :param pulumi.Input[Union['WorkloadKeyInfoArgs', 'WorkloadKeyInfoArgsDict']] key_info: The attributes of the cryptographic key.
        :param pulumi.Input[Union['WorkloadReloadInfoArgs', 'WorkloadReloadInfoArgsDict']] reload_info: The properties used to reload a service.
        :param pulumi.Input[str] slug: Used as the identifier for the workload.
        :param pulumi.Input[str] workload_type: The type of workload being deployed. Possible values are `etcd` `generic` `git` `grafana` `haproxy` `httpd` `kafka`
               `mysql` `nginx` `nodejs` `postgres` `redis` `tomcat` and `zookeeper`. Use `generic` for a basic certificate workload.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkloadState.__new__(_WorkloadState)

        __props__.__dict__["authority_id"] = authority_id
        __props__.__dict__["certificate_data"] = certificate_data
        __props__.__dict__["certificate_info"] = certificate_info
        __props__.__dict__["device_collection_slug"] = device_collection_slug
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["hooks"] = hooks
        __props__.__dict__["key_info"] = key_info
        __props__.__dict__["reload_info"] = reload_info
        __props__.__dict__["slug"] = slug
        __props__.__dict__["workload_type"] = workload_type
        return Workload(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> pulumi.Output[str]:
        """
        A UUID identifying the authority to issue certificates for the workload.
        """
        return pulumi.get(self, "authority_id")

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> pulumi.Output['outputs.WorkloadCertificateData']:
        return pulumi.get(self, "certificate_data")

    @property
    @pulumi.getter(name="certificateInfo")
    def certificate_info(self) -> pulumi.Output['outputs.WorkloadCertificateInfo']:
        """
        Details on a managed certificate.
        """
        return pulumi.get(self, "certificate_info")

    @property
    @pulumi.getter(name="deviceCollectionSlug")
    def device_collection_slug(self) -> pulumi.Output[str]:
        """
        Slug of the device collection the workload will be added to.
        """
        return pulumi.get(self, "device_collection_slug")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        A friendly name for the workload. Also used as the Common Name, if no static SANs are provided.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def hooks(self) -> pulumi.Output['outputs.WorkloadHooks']:
        """
        The collection of commands to run when a certificate for a managed endpoint is signed or renewed.
        """
        return pulumi.get(self, "hooks")

    @property
    @pulumi.getter(name="keyInfo")
    def key_info(self) -> pulumi.Output['outputs.WorkloadKeyInfo']:
        """
        The attributes of the cryptographic key.
        """
        return pulumi.get(self, "key_info")

    @property
    @pulumi.getter(name="reloadInfo")
    def reload_info(self) -> pulumi.Output['outputs.WorkloadReloadInfo']:
        """
        The properties used to reload a service.
        """
        return pulumi.get(self, "reload_info")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        Used as the identifier for the workload.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> pulumi.Output[str]:
        """
        The type of workload being deployed. Possible values are `etcd` `generic` `git` `grafana` `haproxy` `httpd` `kafka`
        `mysql` `nginx` `nodejs` `postgres` `redis` `tomcat` and `zookeeper`. Use `generic` for a basic certificate workload.
        """
        return pulumi.get(self, "workload_type")

