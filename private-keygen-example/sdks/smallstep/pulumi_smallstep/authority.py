# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AuthorityArgs', 'Authority']

@pulumi.input_type
class AuthorityArgs:
    def __init__(__self__, *,
                 admin_emails: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subdomain: pulumi.Input[str],
                 type: pulumi.Input[str],
                 active_revocation: Optional[pulumi.Input[bool]] = None,
                 intermediate_issuer: Optional[pulumi.Input['AuthorityIntermediateIssuerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 root_issuer: Optional[pulumi.Input['AuthorityRootIssuerArgs']] = None):
        """
        The set of arguments for constructing a Authority resource.
        :param pulumi.Input[str] subdomain: The domain where the authority can be reached.
        :param pulumi.Input[str] type: One of the available authority types Allowed values: `devops` `advanced` `managed`
        :param pulumi.Input[bool] active_revocation: Whether CRL and OCSP are enabled (advanced authorities only).
        :param pulumi.Input[str] name: The name of the authority.
        """
        pulumi.set(__self__, "admin_emails", admin_emails)
        pulumi.set(__self__, "subdomain", subdomain)
        pulumi.set(__self__, "type", type)
        if active_revocation is not None:
            pulumi.set(__self__, "active_revocation", active_revocation)
        if intermediate_issuer is not None:
            pulumi.set(__self__, "intermediate_issuer", intermediate_issuer)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if root_issuer is not None:
            pulumi.set(__self__, "root_issuer", root_issuer)

    @property
    @pulumi.getter(name="adminEmails")
    def admin_emails(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "admin_emails")

    @admin_emails.setter
    def admin_emails(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "admin_emails", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        """
        The domain where the authority can be reached.
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        One of the available authority types Allowed values: `devops` `advanced` `managed`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="activeRevocation")
    def active_revocation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether CRL and OCSP are enabled (advanced authorities only).
        """
        return pulumi.get(self, "active_revocation")

    @active_revocation.setter
    def active_revocation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active_revocation", value)

    @property
    @pulumi.getter(name="intermediateIssuer")
    def intermediate_issuer(self) -> Optional[pulumi.Input['AuthorityIntermediateIssuerArgs']]:
        return pulumi.get(self, "intermediate_issuer")

    @intermediate_issuer.setter
    def intermediate_issuer(self, value: Optional[pulumi.Input['AuthorityIntermediateIssuerArgs']]):
        pulumi.set(self, "intermediate_issuer", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the authority.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rootIssuer")
    def root_issuer(self) -> Optional[pulumi.Input['AuthorityRootIssuerArgs']]:
        return pulumi.get(self, "root_issuer")

    @root_issuer.setter
    def root_issuer(self, value: Optional[pulumi.Input['AuthorityRootIssuerArgs']]):
        pulumi.set(self, "root_issuer", value)


@pulumi.input_type
class _AuthorityState:
    def __init__(__self__, *,
                 active_revocation: Optional[pulumi.Input[bool]] = None,
                 admin_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 intermediate_issuer: Optional[pulumi.Input['AuthorityIntermediateIssuerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 root: Optional[pulumi.Input[str]] = None,
                 root_issuer: Optional[pulumi.Input['AuthorityRootIssuerArgs']] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Authority resources.
        :param pulumi.Input[bool] active_revocation: Whether CRL and OCSP are enabled (advanced authorities only).
        :param pulumi.Input[str] created_at: Timestamp when the authority was created.
        :param pulumi.Input[str] domain: The domain where the authority can be reached.
        :param pulumi.Input[str] fingerprint: The SHA-256 digest of the authority's root certificate in hex format.
        :param pulumi.Input[str] name: The name of the authority.
        :param pulumi.Input[str] root: The root certificate in pem format.
        :param pulumi.Input[str] subdomain: The domain where the authority can be reached.
        :param pulumi.Input[str] type: One of the available authority types Allowed values: `devops` `advanced` `managed`
        """
        if active_revocation is not None:
            pulumi.set(__self__, "active_revocation", active_revocation)
        if admin_emails is not None:
            pulumi.set(__self__, "admin_emails", admin_emails)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if intermediate_issuer is not None:
            pulumi.set(__self__, "intermediate_issuer", intermediate_issuer)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if root is not None:
            pulumi.set(__self__, "root", root)
        if root_issuer is not None:
            pulumi.set(__self__, "root_issuer", root_issuer)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="activeRevocation")
    def active_revocation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether CRL and OCSP are enabled (advanced authorities only).
        """
        return pulumi.get(self, "active_revocation")

    @active_revocation.setter
    def active_revocation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active_revocation", value)

    @property
    @pulumi.getter(name="adminEmails")
    def admin_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "admin_emails")

    @admin_emails.setter
    def admin_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "admin_emails", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp when the authority was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain where the authority can be reached.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        """
        The SHA-256 digest of the authority's root certificate in hex format.
        """
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter(name="intermediateIssuer")
    def intermediate_issuer(self) -> Optional[pulumi.Input['AuthorityIntermediateIssuerArgs']]:
        return pulumi.get(self, "intermediate_issuer")

    @intermediate_issuer.setter
    def intermediate_issuer(self, value: Optional[pulumi.Input['AuthorityIntermediateIssuerArgs']]):
        pulumi.set(self, "intermediate_issuer", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the authority.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def root(self) -> Optional[pulumi.Input[str]]:
        """
        The root certificate in pem format.
        """
        return pulumi.get(self, "root")

    @root.setter
    def root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root", value)

    @property
    @pulumi.getter(name="rootIssuer")
    def root_issuer(self) -> Optional[pulumi.Input['AuthorityRootIssuerArgs']]:
        return pulumi.get(self, "root_issuer")

    @root_issuer.setter
    def root_issuer(self, value: Optional[pulumi.Input['AuthorityRootIssuerArgs']]):
        pulumi.set(self, "root_issuer", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain where the authority can be reached.
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        One of the available authority types Allowed values: `devops` `advanced` `managed`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class Authority(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_revocation: Optional[pulumi.Input[bool]] = None,
                 admin_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 intermediate_issuer: Optional[pulumi.Input[Union['AuthorityIntermediateIssuerArgs', 'AuthorityIntermediateIssuerArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 root_issuer: Optional[pulumi.Input[Union['AuthorityRootIssuerArgs', 'AuthorityRootIssuerArgsDict']]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Authority resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active_revocation: Whether CRL and OCSP are enabled (advanced authorities only).
        :param pulumi.Input[str] name: The name of the authority.
        :param pulumi.Input[str] subdomain: The domain where the authority can be reached.
        :param pulumi.Input[str] type: One of the available authority types Allowed values: `devops` `advanced` `managed`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuthorityArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Authority resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AuthorityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthorityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_revocation: Optional[pulumi.Input[bool]] = None,
                 admin_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 intermediate_issuer: Optional[pulumi.Input[Union['AuthorityIntermediateIssuerArgs', 'AuthorityIntermediateIssuerArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 root_issuer: Optional[pulumi.Input[Union['AuthorityRootIssuerArgs', 'AuthorityRootIssuerArgsDict']]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthorityArgs.__new__(AuthorityArgs)

            __props__.__dict__["active_revocation"] = active_revocation
            if admin_emails is None and not opts.urn:
                raise TypeError("Missing required property 'admin_emails'")
            __props__.__dict__["admin_emails"] = admin_emails
            __props__.__dict__["intermediate_issuer"] = intermediate_issuer
            __props__.__dict__["name"] = name
            __props__.__dict__["root_issuer"] = root_issuer
            if subdomain is None and not opts.urn:
                raise TypeError("Missing required property 'subdomain'")
            __props__.__dict__["subdomain"] = subdomain
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["domain"] = None
            __props__.__dict__["fingerprint"] = None
            __props__.__dict__["root"] = None
        super(Authority, __self__).__init__(
            'smallstep:index/authority:Authority',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_revocation: Optional[pulumi.Input[bool]] = None,
            admin_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            fingerprint: Optional[pulumi.Input[str]] = None,
            intermediate_issuer: Optional[pulumi.Input[Union['AuthorityIntermediateIssuerArgs', 'AuthorityIntermediateIssuerArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            root: Optional[pulumi.Input[str]] = None,
            root_issuer: Optional[pulumi.Input[Union['AuthorityRootIssuerArgs', 'AuthorityRootIssuerArgsDict']]] = None,
            subdomain: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Authority':
        """
        Get an existing Authority resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active_revocation: Whether CRL and OCSP are enabled (advanced authorities only).
        :param pulumi.Input[str] created_at: Timestamp when the authority was created.
        :param pulumi.Input[str] domain: The domain where the authority can be reached.
        :param pulumi.Input[str] fingerprint: The SHA-256 digest of the authority's root certificate in hex format.
        :param pulumi.Input[str] name: The name of the authority.
        :param pulumi.Input[str] root: The root certificate in pem format.
        :param pulumi.Input[str] subdomain: The domain where the authority can be reached.
        :param pulumi.Input[str] type: One of the available authority types Allowed values: `devops` `advanced` `managed`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuthorityState.__new__(_AuthorityState)

        __props__.__dict__["active_revocation"] = active_revocation
        __props__.__dict__["admin_emails"] = admin_emails
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["domain"] = domain
        __props__.__dict__["fingerprint"] = fingerprint
        __props__.__dict__["intermediate_issuer"] = intermediate_issuer
        __props__.__dict__["name"] = name
        __props__.__dict__["root"] = root
        __props__.__dict__["root_issuer"] = root_issuer
        __props__.__dict__["subdomain"] = subdomain
        __props__.__dict__["type"] = type
        return Authority(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activeRevocation")
    def active_revocation(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether CRL and OCSP are enabled (advanced authorities only).
        """
        return pulumi.get(self, "active_revocation")

    @property
    @pulumi.getter(name="adminEmails")
    def admin_emails(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "admin_emails")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Timestamp when the authority was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        The domain where the authority can be reached.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def fingerprint(self) -> pulumi.Output[str]:
        """
        The SHA-256 digest of the authority's root certificate in hex format.
        """
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter(name="intermediateIssuer")
    def intermediate_issuer(self) -> pulumi.Output[Optional['outputs.AuthorityIntermediateIssuer']]:
        return pulumi.get(self, "intermediate_issuer")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the authority.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def root(self) -> pulumi.Output[str]:
        """
        The root certificate in pem format.
        """
        return pulumi.get(self, "root")

    @property
    @pulumi.getter(name="rootIssuer")
    def root_issuer(self) -> pulumi.Output[Optional['outputs.AuthorityRootIssuer']]:
        return pulumi.get(self, "root_issuer")

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Output[str]:
        """
        The domain where the authority can be reached.
        """
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        One of the available authority types Allowed values: `devops` `advanced` `managed`
        """
        return pulumi.get(self, "type")

