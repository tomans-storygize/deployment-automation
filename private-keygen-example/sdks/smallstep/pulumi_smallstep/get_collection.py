# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCollectionResult',
    'AwaitableGetCollectionResult',
    'get_collection',
    'get_collection_output',
]

@pulumi.output_type
class GetCollectionResult:
    """
    A collection of values returned by getCollection.
    """
    def __init__(__self__, created_at=None, display_name=None, id=None, instance_count=None, schema_uri=None, slug=None, updated_at=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_count and not isinstance(instance_count, float):
            raise TypeError("Expected argument 'instance_count' to be a float")
        pulumi.set(__self__, "instance_count", instance_count)
        if schema_uri and not isinstance(schema_uri, str):
            raise TypeError("Expected argument 'schema_uri' to be a str")
        pulumi.set(__self__, "schema_uri", schema_uri)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> float:
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="schemaUri")
    def schema_uri(self) -> Optional[str]:
        return pulumi.get(self, "schema_uri")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


class AwaitableGetCollectionResult(GetCollectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCollectionResult(
            created_at=self.created_at,
            display_name=self.display_name,
            id=self.id,
            instance_count=self.instance_count,
            schema_uri=self.schema_uri,
            slug=self.slug,
            updated_at=self.updated_at)


def get_collection(schema_uri: Optional[str] = None,
                   slug: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCollectionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['schemaUri'] = schema_uri
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('smallstep:index/getCollection:getCollection', __args__, opts=opts, typ=GetCollectionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCollectionResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        display_name=pulumi.get(__ret__, 'display_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_count=pulumi.get(__ret__, 'instance_count'),
        schema_uri=pulumi.get(__ret__, 'schema_uri'),
        slug=pulumi.get(__ret__, 'slug'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_collection_output(schema_uri: Optional[pulumi.Input[Optional[str]]] = None,
                          slug: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCollectionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['schemaUri'] = schema_uri
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('smallstep:index/getCollection:getCollection', __args__, opts=opts, typ=GetCollectionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCollectionResult(
        created_at=pulumi.get(__response__, 'created_at'),
        display_name=pulumi.get(__response__, 'display_name'),
        id=pulumi.get(__response__, 'id'),
        instance_count=pulumi.get(__response__, 'instance_count'),
        schema_uri=pulumi.get(__response__, 'schema_uri'),
        slug=pulumi.get(__response__, 'slug'),
        updated_at=pulumi.get(__response__, 'updated_at')))
