# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeviceCollectionAccountArgs', 'DeviceCollectionAccount']

@pulumi.input_type
class DeviceCollectionAccountArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 authority_id: pulumi.Input[str],
                 certificate_data: pulumi.Input['DeviceCollectionAccountCertificateDataArgs'],
                 certificate_info: pulumi.Input['DeviceCollectionAccountCertificateInfoArgs'],
                 device_collection_slug: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 key_info: pulumi.Input['DeviceCollectionAccountKeyInfoArgs'],
                 slug: pulumi.Input[str],
                 reload_info: Optional[pulumi.Input['DeviceCollectionAccountReloadInfoArgs']] = None):
        """
        The set of arguments for constructing a DeviceCollectionAccount resource.
        :param pulumi.Input[str] account_id: Identifier of the account.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the account on devices in the collection.
        :param pulumi.Input['DeviceCollectionAccountCertificateInfoArgs'] certificate_info: Details on a managed certificate.
        :param pulumi.Input[str] display_name: A friendly name for the device collection account. Also used as the Common Name, if no static SANs are provided.
        :param pulumi.Input['DeviceCollectionAccountKeyInfoArgs'] key_info: The attributes of the cryptographic key.
        :param pulumi.Input[str] slug: Used as the identifier for the device collection account.
        :param pulumi.Input['DeviceCollectionAccountReloadInfoArgs'] reload_info: The properties used to reload a service.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "authority_id", authority_id)
        pulumi.set(__self__, "certificate_data", certificate_data)
        pulumi.set(__self__, "certificate_info", certificate_info)
        pulumi.set(__self__, "device_collection_slug", device_collection_slug)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "key_info", key_info)
        pulumi.set(__self__, "slug", slug)
        if reload_info is not None:
            pulumi.set(__self__, "reload_info", reload_info)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        Identifier of the account.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> pulumi.Input[str]:
        """
        A UUID identifying the authority to issue certificates for the account on devices in the collection.
        """
        return pulumi.get(self, "authority_id")

    @authority_id.setter
    def authority_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "authority_id", value)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> pulumi.Input['DeviceCollectionAccountCertificateDataArgs']:
        return pulumi.get(self, "certificate_data")

    @certificate_data.setter
    def certificate_data(self, value: pulumi.Input['DeviceCollectionAccountCertificateDataArgs']):
        pulumi.set(self, "certificate_data", value)

    @property
    @pulumi.getter(name="certificateInfo")
    def certificate_info(self) -> pulumi.Input['DeviceCollectionAccountCertificateInfoArgs']:
        """
        Details on a managed certificate.
        """
        return pulumi.get(self, "certificate_info")

    @certificate_info.setter
    def certificate_info(self, value: pulumi.Input['DeviceCollectionAccountCertificateInfoArgs']):
        pulumi.set(self, "certificate_info", value)

    @property
    @pulumi.getter(name="deviceCollectionSlug")
    def device_collection_slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "device_collection_slug")

    @device_collection_slug.setter
    def device_collection_slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_collection_slug", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        A friendly name for the device collection account. Also used as the Common Name, if no static SANs are provided.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="keyInfo")
    def key_info(self) -> pulumi.Input['DeviceCollectionAccountKeyInfoArgs']:
        """
        The attributes of the cryptographic key.
        """
        return pulumi.get(self, "key_info")

    @key_info.setter
    def key_info(self, value: pulumi.Input['DeviceCollectionAccountKeyInfoArgs']):
        pulumi.set(self, "key_info", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        """
        Used as the identifier for the device collection account.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="reloadInfo")
    def reload_info(self) -> Optional[pulumi.Input['DeviceCollectionAccountReloadInfoArgs']]:
        """
        The properties used to reload a service.
        """
        return pulumi.get(self, "reload_info")

    @reload_info.setter
    def reload_info(self, value: Optional[pulumi.Input['DeviceCollectionAccountReloadInfoArgs']]):
        pulumi.set(self, "reload_info", value)


@pulumi.input_type
class _DeviceCollectionAccountState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 certificate_data: Optional[pulumi.Input['DeviceCollectionAccountCertificateDataArgs']] = None,
                 certificate_info: Optional[pulumi.Input['DeviceCollectionAccountCertificateInfoArgs']] = None,
                 device_collection_slug: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 key_info: Optional[pulumi.Input['DeviceCollectionAccountKeyInfoArgs']] = None,
                 reload_info: Optional[pulumi.Input['DeviceCollectionAccountReloadInfoArgs']] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DeviceCollectionAccount resources.
        :param pulumi.Input[str] account_id: Identifier of the account.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the account on devices in the collection.
        :param pulumi.Input['DeviceCollectionAccountCertificateInfoArgs'] certificate_info: Details on a managed certificate.
        :param pulumi.Input[str] display_name: A friendly name for the device collection account. Also used as the Common Name, if no static SANs are provided.
        :param pulumi.Input['DeviceCollectionAccountKeyInfoArgs'] key_info: The attributes of the cryptographic key.
        :param pulumi.Input['DeviceCollectionAccountReloadInfoArgs'] reload_info: The properties used to reload a service.
        :param pulumi.Input[str] slug: Used as the identifier for the device collection account.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if authority_id is not None:
            pulumi.set(__self__, "authority_id", authority_id)
        if certificate_data is not None:
            pulumi.set(__self__, "certificate_data", certificate_data)
        if certificate_info is not None:
            pulumi.set(__self__, "certificate_info", certificate_info)
        if device_collection_slug is not None:
            pulumi.set(__self__, "device_collection_slug", device_collection_slug)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if key_info is not None:
            pulumi.set(__self__, "key_info", key_info)
        if reload_info is not None:
            pulumi.set(__self__, "reload_info", reload_info)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the account.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> Optional[pulumi.Input[str]]:
        """
        A UUID identifying the authority to issue certificates for the account on devices in the collection.
        """
        return pulumi.get(self, "authority_id")

    @authority_id.setter
    def authority_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authority_id", value)

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> Optional[pulumi.Input['DeviceCollectionAccountCertificateDataArgs']]:
        return pulumi.get(self, "certificate_data")

    @certificate_data.setter
    def certificate_data(self, value: Optional[pulumi.Input['DeviceCollectionAccountCertificateDataArgs']]):
        pulumi.set(self, "certificate_data", value)

    @property
    @pulumi.getter(name="certificateInfo")
    def certificate_info(self) -> Optional[pulumi.Input['DeviceCollectionAccountCertificateInfoArgs']]:
        """
        Details on a managed certificate.
        """
        return pulumi.get(self, "certificate_info")

    @certificate_info.setter
    def certificate_info(self, value: Optional[pulumi.Input['DeviceCollectionAccountCertificateInfoArgs']]):
        pulumi.set(self, "certificate_info", value)

    @property
    @pulumi.getter(name="deviceCollectionSlug")
    def device_collection_slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_collection_slug")

    @device_collection_slug.setter
    def device_collection_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_collection_slug", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        A friendly name for the device collection account. Also used as the Common Name, if no static SANs are provided.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="keyInfo")
    def key_info(self) -> Optional[pulumi.Input['DeviceCollectionAccountKeyInfoArgs']]:
        """
        The attributes of the cryptographic key.
        """
        return pulumi.get(self, "key_info")

    @key_info.setter
    def key_info(self, value: Optional[pulumi.Input['DeviceCollectionAccountKeyInfoArgs']]):
        pulumi.set(self, "key_info", value)

    @property
    @pulumi.getter(name="reloadInfo")
    def reload_info(self) -> Optional[pulumi.Input['DeviceCollectionAccountReloadInfoArgs']]:
        """
        The properties used to reload a service.
        """
        return pulumi.get(self, "reload_info")

    @reload_info.setter
    def reload_info(self, value: Optional[pulumi.Input['DeviceCollectionAccountReloadInfoArgs']]):
        pulumi.set(self, "reload_info", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        Used as the identifier for the device collection account.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


class DeviceCollectionAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 certificate_data: Optional[pulumi.Input[Union['DeviceCollectionAccountCertificateDataArgs', 'DeviceCollectionAccountCertificateDataArgsDict']]] = None,
                 certificate_info: Optional[pulumi.Input[Union['DeviceCollectionAccountCertificateInfoArgs', 'DeviceCollectionAccountCertificateInfoArgsDict']]] = None,
                 device_collection_slug: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 key_info: Optional[pulumi.Input[Union['DeviceCollectionAccountKeyInfoArgs', 'DeviceCollectionAccountKeyInfoArgsDict']]] = None,
                 reload_info: Optional[pulumi.Input[Union['DeviceCollectionAccountReloadInfoArgs', 'DeviceCollectionAccountReloadInfoArgsDict']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DeviceCollectionAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Identifier of the account.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the account on devices in the collection.
        :param pulumi.Input[Union['DeviceCollectionAccountCertificateInfoArgs', 'DeviceCollectionAccountCertificateInfoArgsDict']] certificate_info: Details on a managed certificate.
        :param pulumi.Input[str] display_name: A friendly name for the device collection account. Also used as the Common Name, if no static SANs are provided.
        :param pulumi.Input[Union['DeviceCollectionAccountKeyInfoArgs', 'DeviceCollectionAccountKeyInfoArgsDict']] key_info: The attributes of the cryptographic key.
        :param pulumi.Input[Union['DeviceCollectionAccountReloadInfoArgs', 'DeviceCollectionAccountReloadInfoArgsDict']] reload_info: The properties used to reload a service.
        :param pulumi.Input[str] slug: Used as the identifier for the device collection account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceCollectionAccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DeviceCollectionAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DeviceCollectionAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceCollectionAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 certificate_data: Optional[pulumi.Input[Union['DeviceCollectionAccountCertificateDataArgs', 'DeviceCollectionAccountCertificateDataArgsDict']]] = None,
                 certificate_info: Optional[pulumi.Input[Union['DeviceCollectionAccountCertificateInfoArgs', 'DeviceCollectionAccountCertificateInfoArgsDict']]] = None,
                 device_collection_slug: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 key_info: Optional[pulumi.Input[Union['DeviceCollectionAccountKeyInfoArgs', 'DeviceCollectionAccountKeyInfoArgsDict']]] = None,
                 reload_info: Optional[pulumi.Input[Union['DeviceCollectionAccountReloadInfoArgs', 'DeviceCollectionAccountReloadInfoArgsDict']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceCollectionAccountArgs.__new__(DeviceCollectionAccountArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            if authority_id is None and not opts.urn:
                raise TypeError("Missing required property 'authority_id'")
            __props__.__dict__["authority_id"] = authority_id
            if certificate_data is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_data'")
            __props__.__dict__["certificate_data"] = certificate_data
            if certificate_info is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_info'")
            __props__.__dict__["certificate_info"] = certificate_info
            if device_collection_slug is None and not opts.urn:
                raise TypeError("Missing required property 'device_collection_slug'")
            __props__.__dict__["device_collection_slug"] = device_collection_slug
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if key_info is None and not opts.urn:
                raise TypeError("Missing required property 'key_info'")
            __props__.__dict__["key_info"] = key_info
            __props__.__dict__["reload_info"] = reload_info
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
        super(DeviceCollectionAccount, __self__).__init__(
            'smallstep:index/deviceCollectionAccount:DeviceCollectionAccount',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            authority_id: Optional[pulumi.Input[str]] = None,
            certificate_data: Optional[pulumi.Input[Union['DeviceCollectionAccountCertificateDataArgs', 'DeviceCollectionAccountCertificateDataArgsDict']]] = None,
            certificate_info: Optional[pulumi.Input[Union['DeviceCollectionAccountCertificateInfoArgs', 'DeviceCollectionAccountCertificateInfoArgsDict']]] = None,
            device_collection_slug: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            key_info: Optional[pulumi.Input[Union['DeviceCollectionAccountKeyInfoArgs', 'DeviceCollectionAccountKeyInfoArgsDict']]] = None,
            reload_info: Optional[pulumi.Input[Union['DeviceCollectionAccountReloadInfoArgs', 'DeviceCollectionAccountReloadInfoArgsDict']]] = None,
            slug: Optional[pulumi.Input[str]] = None) -> 'DeviceCollectionAccount':
        """
        Get an existing DeviceCollectionAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: Identifier of the account.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the account on devices in the collection.
        :param pulumi.Input[Union['DeviceCollectionAccountCertificateInfoArgs', 'DeviceCollectionAccountCertificateInfoArgsDict']] certificate_info: Details on a managed certificate.
        :param pulumi.Input[str] display_name: A friendly name for the device collection account. Also used as the Common Name, if no static SANs are provided.
        :param pulumi.Input[Union['DeviceCollectionAccountKeyInfoArgs', 'DeviceCollectionAccountKeyInfoArgsDict']] key_info: The attributes of the cryptographic key.
        :param pulumi.Input[Union['DeviceCollectionAccountReloadInfoArgs', 'DeviceCollectionAccountReloadInfoArgsDict']] reload_info: The properties used to reload a service.
        :param pulumi.Input[str] slug: Used as the identifier for the device collection account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceCollectionAccountState.__new__(_DeviceCollectionAccountState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["authority_id"] = authority_id
        __props__.__dict__["certificate_data"] = certificate_data
        __props__.__dict__["certificate_info"] = certificate_info
        __props__.__dict__["device_collection_slug"] = device_collection_slug
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["key_info"] = key_info
        __props__.__dict__["reload_info"] = reload_info
        __props__.__dict__["slug"] = slug
        return DeviceCollectionAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        Identifier of the account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> pulumi.Output[str]:
        """
        A UUID identifying the authority to issue certificates for the account on devices in the collection.
        """
        return pulumi.get(self, "authority_id")

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> pulumi.Output['outputs.DeviceCollectionAccountCertificateData']:
        return pulumi.get(self, "certificate_data")

    @property
    @pulumi.getter(name="certificateInfo")
    def certificate_info(self) -> pulumi.Output['outputs.DeviceCollectionAccountCertificateInfo']:
        """
        Details on a managed certificate.
        """
        return pulumi.get(self, "certificate_info")

    @property
    @pulumi.getter(name="deviceCollectionSlug")
    def device_collection_slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "device_collection_slug")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        A friendly name for the device collection account. Also used as the Common Name, if no static SANs are provided.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="keyInfo")
    def key_info(self) -> pulumi.Output['outputs.DeviceCollectionAccountKeyInfo']:
        """
        The attributes of the cryptographic key.
        """
        return pulumi.get(self, "key_info")

    @property
    @pulumi.getter(name="reloadInfo")
    def reload_info(self) -> pulumi.Output['outputs.DeviceCollectionAccountReloadInfo']:
        """
        The properties used to reload a service.
        """
        return pulumi.get(self, "reload_info")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        Used as the identifier for the device collection account.
        """
        return pulumi.get(self, "slug")

