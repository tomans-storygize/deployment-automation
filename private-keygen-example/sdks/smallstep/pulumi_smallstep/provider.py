# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input['ProviderClientCertificateArgs']] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] bearer_token: Credential used to authenticate to the Smallstep API. May also be provided via the SMALLSTEP_API_TOKEN environment
               variable. Use the Smallstep dashboard to manage API tokens. Ignored if a client certificate is set.
        :param pulumi.Input['ProviderClientCertificateArgs'] client_certificate: Get an API token with a client certificate key pair signed by your trusted root. Use the Smallstep dashboard to manage
               trusted roots.
        """
        if bearer_token is not None:
            pulumi.set(__self__, "bearer_token", bearer_token)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> Optional[pulumi.Input[str]]:
        """
        Credential used to authenticate to the Smallstep API. May also be provided via the SMALLSTEP_API_TOKEN environment
        variable. Use the Smallstep dashboard to manage API tokens. Ignored if a client certificate is set.
        """
        return pulumi.get(self, "bearer_token")

    @bearer_token.setter
    def bearer_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bearer_token", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input['ProviderClientCertificateArgs']]:
        """
        Get an API token with a client certificate key pair signed by your trusted root. Use the Smallstep dashboard to manage
        trusted roots.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input['ProviderClientCertificateArgs']]):
        pulumi.set(self, "client_certificate", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[Union['ProviderClientCertificateArgs', 'ProviderClientCertificateArgsDict']]] = None,
                 __props__=None):
        """
        The provider type for the smallstep package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bearer_token: Credential used to authenticate to the Smallstep API. May also be provided via the SMALLSTEP_API_TOKEN environment
               variable. Use the Smallstep dashboard to manage API tokens. Ignored if a client certificate is set.
        :param pulumi.Input[Union['ProviderClientCertificateArgs', 'ProviderClientCertificateArgsDict']] client_certificate: Get an API token with a client certificate key pair signed by your trusted root. Use the Smallstep dashboard to manage
               trusted roots.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the smallstep package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[Union['ProviderClientCertificateArgs', 'ProviderClientCertificateArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["bearer_token"] = None if bearer_token is None else pulumi.Output.secret(bearer_token)
            __props__.__dict__["client_certificate"] = pulumi.Output.from_input(client_certificate).apply(pulumi.runtime.to_json) if client_certificate is not None else None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["bearerToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'smallstep',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> pulumi.Output[Optional[str]]:
        """
        Credential used to authenticate to the Smallstep API. May also be provided via the SMALLSTEP_API_TOKEN environment
        variable. Use the Smallstep dashboard to manage API tokens. Ignored if a client certificate is set.
        """
        return pulumi.get(self, "bearer_token")

