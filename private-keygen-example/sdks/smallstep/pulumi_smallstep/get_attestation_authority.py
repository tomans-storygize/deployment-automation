# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAttestationAuthorityResult',
    'AwaitableGetAttestationAuthorityResult',
    'get_attestation_authority',
    'get_attestation_authority_output',
]

@pulumi.output_type
class GetAttestationAuthorityResult:
    """
    A collection of values returned by getAttestationAuthority.
    """
    def __init__(__self__, attestor_intermediates=None, attestor_roots=None, created_at=None, id=None, name=None, root=None, slug=None):
        if attestor_intermediates and not isinstance(attestor_intermediates, str):
            raise TypeError("Expected argument 'attestor_intermediates' to be a str")
        pulumi.set(__self__, "attestor_intermediates", attestor_intermediates)
        if attestor_roots and not isinstance(attestor_roots, str):
            raise TypeError("Expected argument 'attestor_roots' to be a str")
        pulumi.set(__self__, "attestor_roots", attestor_roots)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if root and not isinstance(root, str):
            raise TypeError("Expected argument 'root' to be a str")
        pulumi.set(__self__, "root", root)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="attestorIntermediates")
    def attestor_intermediates(self) -> str:
        return pulumi.get(self, "attestor_intermediates")

    @property
    @pulumi.getter(name="attestorRoots")
    def attestor_roots(self) -> str:
        return pulumi.get(self, "attestor_roots")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def root(self) -> str:
        return pulumi.get(self, "root")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


class AwaitableGetAttestationAuthorityResult(GetAttestationAuthorityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAttestationAuthorityResult(
            attestor_intermediates=self.attestor_intermediates,
            attestor_roots=self.attestor_roots,
            created_at=self.created_at,
            id=self.id,
            name=self.name,
            root=self.root,
            slug=self.slug)


def get_attestation_authority(id: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAttestationAuthorityResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('smallstep:index/getAttestationAuthority:getAttestationAuthority', __args__, opts=opts, typ=GetAttestationAuthorityResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAttestationAuthorityResult(
        attestor_intermediates=pulumi.get(__ret__, 'attestor_intermediates'),
        attestor_roots=pulumi.get(__ret__, 'attestor_roots'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        root=pulumi.get(__ret__, 'root'),
        slug=pulumi.get(__ret__, 'slug'))
def get_attestation_authority_output(id: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAttestationAuthorityResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('smallstep:index/getAttestationAuthority:getAttestationAuthority', __args__, opts=opts, typ=GetAttestationAuthorityResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAttestationAuthorityResult(
        attestor_intermediates=pulumi.get(__response__, 'attestor_intermediates'),
        attestor_roots=pulumi.get(__response__, 'attestor_roots'),
        created_at=pulumi.get(__response__, 'created_at'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        root=pulumi.get(__response__, 'root'),
        slug=pulumi.get(__response__, 'slug')))
