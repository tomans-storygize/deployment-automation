# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProvisionerWebhookArgs', 'ProvisionerWebhook']

@pulumi.input_type
class ProvisionerWebhookArgs:
    def __init__(__self__, *,
                 authority_id: pulumi.Input[str],
                 cert_type: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 provisioner_id: pulumi.Input[str],
                 server_type: pulumi.Input[str],
                 basic_auth: Optional[pulumi.Input['ProvisionerWebhookBasicAuthArgs']] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 collection_slug: Optional[pulumi.Input[str]] = None,
                 disable_tls_client_auth: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProvisionerWebhook resource.
        :param pulumi.Input[str] cert_type: Allowed values: `ALL` `X509` `SSH`
        :param pulumi.Input[str] kind: The webhook kind indicates how and when it is called. ENRICHING webhooks are called before rendering the certificate
               template. They have two functions. First, they must allow the certificate request or it will be aborted. Second, they
               can return additional data to be referenced in the certificate template. The payload sent to the webhook server varies
               based on whether an X509 or SSH certificate is to be signed and based on the type of provisioner. Allowed values:
               `ENRICHING`
        :param pulumi.Input[str] server_type: An EXTERNAL webhook server is not operated by Smallstep. The caller must use the returned ID and secret to configure the
               server. A HOSTED_ATTESTATION webhook server is hosted by Smallstep and must be used with an `ENRICHING` webhook type and
               an ACME Attestation provisioner. The webhook server will verify the attested permanent identifier exists as the ID of an
               instance in the configured collection. The data of the instance in the collection will be added to the template data.
               Allowed values: `EXTERNAL` `HOSTED_ATTESTATION`
        :param pulumi.Input['ProvisionerWebhookBasicAuthArgs'] basic_auth: Configures provisioner webhook requests to include an Authorization header with these credentials. Optional for
               `EXTERNAL` webhook servers; not allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be
               set.
        :param pulumi.Input[str] bearer_token: Webhook requests will include an Authorization header with the token. Optional for `EXTERNAL` webhook servers; not
               allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be set.
        :param pulumi.Input[str] collection_slug: For HOSTED_ATTESTATION webhooks, the collectionSlug is a reference to the collection that holds the devices that may be
               issued certificates. This collection must already exist. Required for `HOSTED_ATTESTATION` webhook servers; not allowed
               for `EXTERNAL`.
        :param pulumi.Input[bool] disable_tls_client_auth: The CA will not send a client certificate when requested by the webhook server. Optional for `EXTERNAL` webhook servers;
               not allowed with hosted webhook servers.
        :param pulumi.Input[str] name: The name of the webhook. For `ENRICHING` webhooks, the returned data can be referenced in the certificate under the path
               `.Webhooks.<name>`. Must be unique to the provisioner.
        :param pulumi.Input[str] url: The URL of the webhook server. Required for `EXTERNAL` webhook servers; read-only for hosted webhook servers.
        """
        pulumi.set(__self__, "authority_id", authority_id)
        pulumi.set(__self__, "cert_type", cert_type)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "provisioner_id", provisioner_id)
        pulumi.set(__self__, "server_type", server_type)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if bearer_token is not None:
            pulumi.set(__self__, "bearer_token", bearer_token)
        if collection_slug is not None:
            pulumi.set(__self__, "collection_slug", collection_slug)
        if disable_tls_client_auth is not None:
            pulumi.set(__self__, "disable_tls_client_auth", disable_tls_client_auth)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authority_id")

    @authority_id.setter
    def authority_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "authority_id", value)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> pulumi.Input[str]:
        """
        Allowed values: `ALL` `X509` `SSH`
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        The webhook kind indicates how and when it is called. ENRICHING webhooks are called before rendering the certificate
        template. They have two functions. First, they must allow the certificate request or it will be aborted. Second, they
        can return additional data to be referenced in the certificate template. The payload sent to the webhook server varies
        based on whether an X509 or SSH certificate is to be signed and based on the type of provisioner. Allowed values:
        `ENRICHING`
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="provisionerId")
    def provisioner_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "provisioner_id")

    @provisioner_id.setter
    def provisioner_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "provisioner_id", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Input[str]:
        """
        An EXTERNAL webhook server is not operated by Smallstep. The caller must use the returned ID and secret to configure the
        server. A HOSTED_ATTESTATION webhook server is hosted by Smallstep and must be used with an `ENRICHING` webhook type and
        an ACME Attestation provisioner. The webhook server will verify the attested permanent identifier exists as the ID of an
        instance in the configured collection. The data of the instance in the collection will be added to the template data.
        Allowed values: `EXTERNAL` `HOSTED_ATTESTATION`
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional[pulumi.Input['ProvisionerWebhookBasicAuthArgs']]:
        """
        Configures provisioner webhook requests to include an Authorization header with these credentials. Optional for
        `EXTERNAL` webhook servers; not allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be
        set.
        """
        return pulumi.get(self, "basic_auth")

    @basic_auth.setter
    def basic_auth(self, value: Optional[pulumi.Input['ProvisionerWebhookBasicAuthArgs']]):
        pulumi.set(self, "basic_auth", value)

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> Optional[pulumi.Input[str]]:
        """
        Webhook requests will include an Authorization header with the token. Optional for `EXTERNAL` webhook servers; not
        allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be set.
        """
        return pulumi.get(self, "bearer_token")

    @bearer_token.setter
    def bearer_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bearer_token", value)

    @property
    @pulumi.getter(name="collectionSlug")
    def collection_slug(self) -> Optional[pulumi.Input[str]]:
        """
        For HOSTED_ATTESTATION webhooks, the collectionSlug is a reference to the collection that holds the devices that may be
        issued certificates. This collection must already exist. Required for `HOSTED_ATTESTATION` webhook servers; not allowed
        for `EXTERNAL`.
        """
        return pulumi.get(self, "collection_slug")

    @collection_slug.setter
    def collection_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection_slug", value)

    @property
    @pulumi.getter(name="disableTlsClientAuth")
    def disable_tls_client_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        The CA will not send a client certificate when requested by the webhook server. Optional for `EXTERNAL` webhook servers;
        not allowed with hosted webhook servers.
        """
        return pulumi.get(self, "disable_tls_client_auth")

    @disable_tls_client_auth.setter
    def disable_tls_client_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_tls_client_auth", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the webhook. For `ENRICHING` webhooks, the returned data can be referenced in the certificate under the path
        `.Webhooks.<name>`. Must be unique to the provisioner.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the webhook server. Required for `EXTERNAL` webhook servers; read-only for hosted webhook servers.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class _ProvisionerWebhookState:
    def __init__(__self__, *,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 basic_auth: Optional[pulumi.Input['ProvisionerWebhookBasicAuthArgs']] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 cert_type: Optional[pulumi.Input[str]] = None,
                 collection_slug: Optional[pulumi.Input[str]] = None,
                 disable_tls_client_auth: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provisioner_id: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProvisionerWebhook resources.
        :param pulumi.Input['ProvisionerWebhookBasicAuthArgs'] basic_auth: Configures provisioner webhook requests to include an Authorization header with these credentials. Optional for
               `EXTERNAL` webhook servers; not allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be
               set.
        :param pulumi.Input[str] bearer_token: Webhook requests will include an Authorization header with the token. Optional for `EXTERNAL` webhook servers; not
               allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be set.
        :param pulumi.Input[str] cert_type: Allowed values: `ALL` `X509` `SSH`
        :param pulumi.Input[str] collection_slug: For HOSTED_ATTESTATION webhooks, the collectionSlug is a reference to the collection that holds the devices that may be
               issued certificates. This collection must already exist. Required for `HOSTED_ATTESTATION` webhook servers; not allowed
               for `EXTERNAL`.
        :param pulumi.Input[bool] disable_tls_client_auth: The CA will not send a client certificate when requested by the webhook server. Optional for `EXTERNAL` webhook servers;
               not allowed with hosted webhook servers.
        :param pulumi.Input[str] kind: The webhook kind indicates how and when it is called. ENRICHING webhooks are called before rendering the certificate
               template. They have two functions. First, they must allow the certificate request or it will be aborted. Second, they
               can return additional data to be referenced in the certificate template. The payload sent to the webhook server varies
               based on whether an X509 or SSH certificate is to be signed and based on the type of provisioner. Allowed values:
               `ENRICHING`
        :param pulumi.Input[str] name: The name of the webhook. For `ENRICHING` webhooks, the returned data can be referenced in the certificate under the path
               `.Webhooks.<name>`. Must be unique to the provisioner.
        :param pulumi.Input[str] secret: The shared secret used to authenticate the payload sent to the webhook server. Generated server-side. This is returned
               only for `EXTERNAL` webhook servers and only once, at the time of creation.
        :param pulumi.Input[str] server_type: An EXTERNAL webhook server is not operated by Smallstep. The caller must use the returned ID and secret to configure the
               server. A HOSTED_ATTESTATION webhook server is hosted by Smallstep and must be used with an `ENRICHING` webhook type and
               an ACME Attestation provisioner. The webhook server will verify the attested permanent identifier exists as the ID of an
               instance in the configured collection. The data of the instance in the collection will be added to the template data.
               Allowed values: `EXTERNAL` `HOSTED_ATTESTATION`
        :param pulumi.Input[str] url: The URL of the webhook server. Required for `EXTERNAL` webhook servers; read-only for hosted webhook servers.
        """
        if authority_id is not None:
            pulumi.set(__self__, "authority_id", authority_id)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if bearer_token is not None:
            pulumi.set(__self__, "bearer_token", bearer_token)
        if cert_type is not None:
            pulumi.set(__self__, "cert_type", cert_type)
        if collection_slug is not None:
            pulumi.set(__self__, "collection_slug", collection_slug)
        if disable_tls_client_auth is not None:
            pulumi.set(__self__, "disable_tls_client_auth", disable_tls_client_auth)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provisioner_id is not None:
            pulumi.set(__self__, "provisioner_id", provisioner_id)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authority_id")

    @authority_id.setter
    def authority_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authority_id", value)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional[pulumi.Input['ProvisionerWebhookBasicAuthArgs']]:
        """
        Configures provisioner webhook requests to include an Authorization header with these credentials. Optional for
        `EXTERNAL` webhook servers; not allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be
        set.
        """
        return pulumi.get(self, "basic_auth")

    @basic_auth.setter
    def basic_auth(self, value: Optional[pulumi.Input['ProvisionerWebhookBasicAuthArgs']]):
        pulumi.set(self, "basic_auth", value)

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> Optional[pulumi.Input[str]]:
        """
        Webhook requests will include an Authorization header with the token. Optional for `EXTERNAL` webhook servers; not
        allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be set.
        """
        return pulumi.get(self, "bearer_token")

    @bearer_token.setter
    def bearer_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bearer_token", value)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: `ALL` `X509` `SSH`
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter(name="collectionSlug")
    def collection_slug(self) -> Optional[pulumi.Input[str]]:
        """
        For HOSTED_ATTESTATION webhooks, the collectionSlug is a reference to the collection that holds the devices that may be
        issued certificates. This collection must already exist. Required for `HOSTED_ATTESTATION` webhook servers; not allowed
        for `EXTERNAL`.
        """
        return pulumi.get(self, "collection_slug")

    @collection_slug.setter
    def collection_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection_slug", value)

    @property
    @pulumi.getter(name="disableTlsClientAuth")
    def disable_tls_client_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        The CA will not send a client certificate when requested by the webhook server. Optional for `EXTERNAL` webhook servers;
        not allowed with hosted webhook servers.
        """
        return pulumi.get(self, "disable_tls_client_auth")

    @disable_tls_client_auth.setter
    def disable_tls_client_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_tls_client_auth", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The webhook kind indicates how and when it is called. ENRICHING webhooks are called before rendering the certificate
        template. They have two functions. First, they must allow the certificate request or it will be aborted. Second, they
        can return additional data to be referenced in the certificate template. The payload sent to the webhook server varies
        based on whether an X509 or SSH certificate is to be signed and based on the type of provisioner. Allowed values:
        `ENRICHING`
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the webhook. For `ENRICHING` webhooks, the returned data can be referenced in the certificate under the path
        `.Webhooks.<name>`. Must be unique to the provisioner.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="provisionerId")
    def provisioner_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provisioner_id")

    @provisioner_id.setter
    def provisioner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioner_id", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        The shared secret used to authenticate the payload sent to the webhook server. Generated server-side. This is returned
        only for `EXTERNAL` webhook servers and only once, at the time of creation.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        An EXTERNAL webhook server is not operated by Smallstep. The caller must use the returned ID and secret to configure the
        server. A HOSTED_ATTESTATION webhook server is hosted by Smallstep and must be used with an `ENRICHING` webhook type and
        an ACME Attestation provisioner. The webhook server will verify the attested permanent identifier exists as the ID of an
        instance in the configured collection. The data of the instance in the collection will be added to the template data.
        Allowed values: `EXTERNAL` `HOSTED_ATTESTATION`
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the webhook server. Required for `EXTERNAL` webhook servers; read-only for hosted webhook servers.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class ProvisionerWebhook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 basic_auth: Optional[pulumi.Input[Union['ProvisionerWebhookBasicAuthArgs', 'ProvisionerWebhookBasicAuthArgsDict']]] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 cert_type: Optional[pulumi.Input[str]] = None,
                 collection_slug: Optional[pulumi.Input[str]] = None,
                 disable_tls_client_auth: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provisioner_id: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ProvisionerWebhook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ProvisionerWebhookBasicAuthArgs', 'ProvisionerWebhookBasicAuthArgsDict']] basic_auth: Configures provisioner webhook requests to include an Authorization header with these credentials. Optional for
               `EXTERNAL` webhook servers; not allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be
               set.
        :param pulumi.Input[str] bearer_token: Webhook requests will include an Authorization header with the token. Optional for `EXTERNAL` webhook servers; not
               allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be set.
        :param pulumi.Input[str] cert_type: Allowed values: `ALL` `X509` `SSH`
        :param pulumi.Input[str] collection_slug: For HOSTED_ATTESTATION webhooks, the collectionSlug is a reference to the collection that holds the devices that may be
               issued certificates. This collection must already exist. Required for `HOSTED_ATTESTATION` webhook servers; not allowed
               for `EXTERNAL`.
        :param pulumi.Input[bool] disable_tls_client_auth: The CA will not send a client certificate when requested by the webhook server. Optional for `EXTERNAL` webhook servers;
               not allowed with hosted webhook servers.
        :param pulumi.Input[str] kind: The webhook kind indicates how and when it is called. ENRICHING webhooks are called before rendering the certificate
               template. They have two functions. First, they must allow the certificate request or it will be aborted. Second, they
               can return additional data to be referenced in the certificate template. The payload sent to the webhook server varies
               based on whether an X509 or SSH certificate is to be signed and based on the type of provisioner. Allowed values:
               `ENRICHING`
        :param pulumi.Input[str] name: The name of the webhook. For `ENRICHING` webhooks, the returned data can be referenced in the certificate under the path
               `.Webhooks.<name>`. Must be unique to the provisioner.
        :param pulumi.Input[str] server_type: An EXTERNAL webhook server is not operated by Smallstep. The caller must use the returned ID and secret to configure the
               server. A HOSTED_ATTESTATION webhook server is hosted by Smallstep and must be used with an `ENRICHING` webhook type and
               an ACME Attestation provisioner. The webhook server will verify the attested permanent identifier exists as the ID of an
               instance in the configured collection. The data of the instance in the collection will be added to the template data.
               Allowed values: `EXTERNAL` `HOSTED_ATTESTATION`
        :param pulumi.Input[str] url: The URL of the webhook server. Required for `EXTERNAL` webhook servers; read-only for hosted webhook servers.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProvisionerWebhookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ProvisionerWebhook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProvisionerWebhookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProvisionerWebhookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 basic_auth: Optional[pulumi.Input[Union['ProvisionerWebhookBasicAuthArgs', 'ProvisionerWebhookBasicAuthArgsDict']]] = None,
                 bearer_token: Optional[pulumi.Input[str]] = None,
                 cert_type: Optional[pulumi.Input[str]] = None,
                 collection_slug: Optional[pulumi.Input[str]] = None,
                 disable_tls_client_auth: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provisioner_id: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProvisionerWebhookArgs.__new__(ProvisionerWebhookArgs)

            if authority_id is None and not opts.urn:
                raise TypeError("Missing required property 'authority_id'")
            __props__.__dict__["authority_id"] = authority_id
            __props__.__dict__["basic_auth"] = basic_auth
            __props__.__dict__["bearer_token"] = None if bearer_token is None else pulumi.Output.secret(bearer_token)
            if cert_type is None and not opts.urn:
                raise TypeError("Missing required property 'cert_type'")
            __props__.__dict__["cert_type"] = cert_type
            __props__.__dict__["collection_slug"] = collection_slug
            __props__.__dict__["disable_tls_client_auth"] = disable_tls_client_auth
            if kind is None and not opts.urn:
                raise TypeError("Missing required property 'kind'")
            __props__.__dict__["kind"] = kind
            __props__.__dict__["name"] = name
            if provisioner_id is None and not opts.urn:
                raise TypeError("Missing required property 'provisioner_id'")
            __props__.__dict__["provisioner_id"] = provisioner_id
            if server_type is None and not opts.urn:
                raise TypeError("Missing required property 'server_type'")
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["url"] = url
            __props__.__dict__["secret"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["bearerToken", "secret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ProvisionerWebhook, __self__).__init__(
            'smallstep:index/provisionerWebhook:ProvisionerWebhook',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authority_id: Optional[pulumi.Input[str]] = None,
            basic_auth: Optional[pulumi.Input[Union['ProvisionerWebhookBasicAuthArgs', 'ProvisionerWebhookBasicAuthArgsDict']]] = None,
            bearer_token: Optional[pulumi.Input[str]] = None,
            cert_type: Optional[pulumi.Input[str]] = None,
            collection_slug: Optional[pulumi.Input[str]] = None,
            disable_tls_client_auth: Optional[pulumi.Input[bool]] = None,
            kind: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            provisioner_id: Optional[pulumi.Input[str]] = None,
            secret: Optional[pulumi.Input[str]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'ProvisionerWebhook':
        """
        Get an existing ProvisionerWebhook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ProvisionerWebhookBasicAuthArgs', 'ProvisionerWebhookBasicAuthArgsDict']] basic_auth: Configures provisioner webhook requests to include an Authorization header with these credentials. Optional for
               `EXTERNAL` webhook servers; not allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be
               set.
        :param pulumi.Input[str] bearer_token: Webhook requests will include an Authorization header with the token. Optional for `EXTERNAL` webhook servers; not
               allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be set.
        :param pulumi.Input[str] cert_type: Allowed values: `ALL` `X509` `SSH`
        :param pulumi.Input[str] collection_slug: For HOSTED_ATTESTATION webhooks, the collectionSlug is a reference to the collection that holds the devices that may be
               issued certificates. This collection must already exist. Required for `HOSTED_ATTESTATION` webhook servers; not allowed
               for `EXTERNAL`.
        :param pulumi.Input[bool] disable_tls_client_auth: The CA will not send a client certificate when requested by the webhook server. Optional for `EXTERNAL` webhook servers;
               not allowed with hosted webhook servers.
        :param pulumi.Input[str] kind: The webhook kind indicates how and when it is called. ENRICHING webhooks are called before rendering the certificate
               template. They have two functions. First, they must allow the certificate request or it will be aborted. Second, they
               can return additional data to be referenced in the certificate template. The payload sent to the webhook server varies
               based on whether an X509 or SSH certificate is to be signed and based on the type of provisioner. Allowed values:
               `ENRICHING`
        :param pulumi.Input[str] name: The name of the webhook. For `ENRICHING` webhooks, the returned data can be referenced in the certificate under the path
               `.Webhooks.<name>`. Must be unique to the provisioner.
        :param pulumi.Input[str] secret: The shared secret used to authenticate the payload sent to the webhook server. Generated server-side. This is returned
               only for `EXTERNAL` webhook servers and only once, at the time of creation.
        :param pulumi.Input[str] server_type: An EXTERNAL webhook server is not operated by Smallstep. The caller must use the returned ID and secret to configure the
               server. A HOSTED_ATTESTATION webhook server is hosted by Smallstep and must be used with an `ENRICHING` webhook type and
               an ACME Attestation provisioner. The webhook server will verify the attested permanent identifier exists as the ID of an
               instance in the configured collection. The data of the instance in the collection will be added to the template data.
               Allowed values: `EXTERNAL` `HOSTED_ATTESTATION`
        :param pulumi.Input[str] url: The URL of the webhook server. Required for `EXTERNAL` webhook servers; read-only for hosted webhook servers.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProvisionerWebhookState.__new__(_ProvisionerWebhookState)

        __props__.__dict__["authority_id"] = authority_id
        __props__.__dict__["basic_auth"] = basic_auth
        __props__.__dict__["bearer_token"] = bearer_token
        __props__.__dict__["cert_type"] = cert_type
        __props__.__dict__["collection_slug"] = collection_slug
        __props__.__dict__["disable_tls_client_auth"] = disable_tls_client_auth
        __props__.__dict__["kind"] = kind
        __props__.__dict__["name"] = name
        __props__.__dict__["provisioner_id"] = provisioner_id
        __props__.__dict__["secret"] = secret
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["url"] = url
        return ProvisionerWebhook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "authority_id")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> pulumi.Output[Optional['outputs.ProvisionerWebhookBasicAuth']]:
        """
        Configures provisioner webhook requests to include an Authorization header with these credentials. Optional for
        `EXTERNAL` webhook servers; not allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be
        set.
        """
        return pulumi.get(self, "basic_auth")

    @property
    @pulumi.getter(name="bearerToken")
    def bearer_token(self) -> pulumi.Output[Optional[str]]:
        """
        Webhook requests will include an Authorization header with the token. Optional for `EXTERNAL` webhook servers; not
        allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be set.
        """
        return pulumi.get(self, "bearer_token")

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> pulumi.Output[str]:
        """
        Allowed values: `ALL` `X509` `SSH`
        """
        return pulumi.get(self, "cert_type")

    @property
    @pulumi.getter(name="collectionSlug")
    def collection_slug(self) -> pulumi.Output[Optional[str]]:
        """
        For HOSTED_ATTESTATION webhooks, the collectionSlug is a reference to the collection that holds the devices that may be
        issued certificates. This collection must already exist. Required for `HOSTED_ATTESTATION` webhook servers; not allowed
        for `EXTERNAL`.
        """
        return pulumi.get(self, "collection_slug")

    @property
    @pulumi.getter(name="disableTlsClientAuth")
    def disable_tls_client_auth(self) -> pulumi.Output[Optional[bool]]:
        """
        The CA will not send a client certificate when requested by the webhook server. Optional for `EXTERNAL` webhook servers;
        not allowed with hosted webhook servers.
        """
        return pulumi.get(self, "disable_tls_client_auth")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        The webhook kind indicates how and when it is called. ENRICHING webhooks are called before rendering the certificate
        template. They have two functions. First, they must allow the certificate request or it will be aborted. Second, they
        can return additional data to be referenced in the certificate template. The payload sent to the webhook server varies
        based on whether an X509 or SSH certificate is to be signed and based on the type of provisioner. Allowed values:
        `ENRICHING`
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the webhook. For `ENRICHING` webhooks, the returned data can be referenced in the certificate under the path
        `.Webhooks.<name>`. Must be unique to the provisioner.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisionerId")
    def provisioner_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "provisioner_id")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[str]:
        """
        The shared secret used to authenticate the payload sent to the webhook server. Generated server-side. This is returned
        only for `EXTERNAL` webhook servers and only once, at the time of creation.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        """
        An EXTERNAL webhook server is not operated by Smallstep. The caller must use the returned ID and secret to configure the
        server. A HOSTED_ATTESTATION webhook server is hosted by Smallstep and must be used with an `ENRICHING` webhook type and
        an ACME Attestation provisioner. The webhook server will verify the attested permanent identifier exists as the ID of an
        instance in the configured collection. The data of the instance in the collection will be added to the template data.
        Allowed values: `EXTERNAL` `HOSTED_ATTESTATION`
        """
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL of the webhook server. Required for `EXTERNAL` webhook servers; read-only for hosted webhook servers.
        """
        return pulumi.get(self, "url")

