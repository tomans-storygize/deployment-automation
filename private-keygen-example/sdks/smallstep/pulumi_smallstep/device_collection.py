# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeviceCollectionArgs', 'DeviceCollection']

@pulumi.input_type
class DeviceCollectionArgs:
    def __init__(__self__, *,
                 authority_id: pulumi.Input[str],
                 device_type: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 slug: pulumi.Input[str],
                 aws_vm: Optional[pulumi.Input['DeviceCollectionAwsVmArgs']] = None,
                 azure_vm: Optional[pulumi.Input['DeviceCollectionAzureVmArgs']] = None,
                 gcp_vm: Optional[pulumi.Input['DeviceCollectionGcpVmArgs']] = None,
                 tpm: Optional[pulumi.Input['DeviceCollectionTpmArgs']] = None):
        """
        The set of arguments for constructing a DeviceCollection resource.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the agent running on devices in the collection.
        :param pulumi.Input[str] device_type: Must match the deviceTypeConfiguration. Cannot be changed. Allowed values: `aws-vm` `azure-vm` `gcp-vm` `tpm`
        :param pulumi.Input['DeviceCollectionAwsVmArgs'] aws_vm: Configuration for an AWS provisioner for a device collection of AWS VMs.
        :param pulumi.Input['DeviceCollectionGcpVmArgs'] gcp_vm: Configuration for the GCP provisioner for device collections of GCP instances. At least one service account or project
               ID must be set.
        :param pulumi.Input['DeviceCollectionTpmArgs'] tpm: Configuration for a device collection of machines with TPMs.
        """
        pulumi.set(__self__, "authority_id", authority_id)
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "slug", slug)
        if aws_vm is not None:
            pulumi.set(__self__, "aws_vm", aws_vm)
        if azure_vm is not None:
            pulumi.set(__self__, "azure_vm", azure_vm)
        if gcp_vm is not None:
            pulumi.set(__self__, "gcp_vm", gcp_vm)
        if tpm is not None:
            pulumi.set(__self__, "tpm", tpm)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> pulumi.Input[str]:
        """
        A UUID identifying the authority to issue certificates for the agent running on devices in the collection.
        """
        return pulumi.get(self, "authority_id")

    @authority_id.setter
    def authority_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "authority_id", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Input[str]:
        """
        Must match the deviceTypeConfiguration. Cannot be changed. Allowed values: `aws-vm` `azure-vm` `gcp-vm` `tpm`
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="awsVm")
    def aws_vm(self) -> Optional[pulumi.Input['DeviceCollectionAwsVmArgs']]:
        """
        Configuration for an AWS provisioner for a device collection of AWS VMs.
        """
        return pulumi.get(self, "aws_vm")

    @aws_vm.setter
    def aws_vm(self, value: Optional[pulumi.Input['DeviceCollectionAwsVmArgs']]):
        pulumi.set(self, "aws_vm", value)

    @property
    @pulumi.getter(name="azureVm")
    def azure_vm(self) -> Optional[pulumi.Input['DeviceCollectionAzureVmArgs']]:
        return pulumi.get(self, "azure_vm")

    @azure_vm.setter
    def azure_vm(self, value: Optional[pulumi.Input['DeviceCollectionAzureVmArgs']]):
        pulumi.set(self, "azure_vm", value)

    @property
    @pulumi.getter(name="gcpVm")
    def gcp_vm(self) -> Optional[pulumi.Input['DeviceCollectionGcpVmArgs']]:
        """
        Configuration for the GCP provisioner for device collections of GCP instances. At least one service account or project
        ID must be set.
        """
        return pulumi.get(self, "gcp_vm")

    @gcp_vm.setter
    def gcp_vm(self, value: Optional[pulumi.Input['DeviceCollectionGcpVmArgs']]):
        pulumi.set(self, "gcp_vm", value)

    @property
    @pulumi.getter
    def tpm(self) -> Optional[pulumi.Input['DeviceCollectionTpmArgs']]:
        """
        Configuration for a device collection of machines with TPMs.
        """
        return pulumi.get(self, "tpm")

    @tpm.setter
    def tpm(self, value: Optional[pulumi.Input['DeviceCollectionTpmArgs']]):
        pulumi.set(self, "tpm", value)


@pulumi.input_type
class _DeviceCollectionState:
    def __init__(__self__, *,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 aws_vm: Optional[pulumi.Input['DeviceCollectionAwsVmArgs']] = None,
                 azure_vm: Optional[pulumi.Input['DeviceCollectionAzureVmArgs']] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 gcp_vm: Optional[pulumi.Input['DeviceCollectionGcpVmArgs']] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 tpm: Optional[pulumi.Input['DeviceCollectionTpmArgs']] = None):
        """
        Input properties used for looking up and filtering DeviceCollection resources.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the agent running on devices in the collection.
        :param pulumi.Input['DeviceCollectionAwsVmArgs'] aws_vm: Configuration for an AWS provisioner for a device collection of AWS VMs.
        :param pulumi.Input[str] device_type: Must match the deviceTypeConfiguration. Cannot be changed. Allowed values: `aws-vm` `azure-vm` `gcp-vm` `tpm`
        :param pulumi.Input['DeviceCollectionGcpVmArgs'] gcp_vm: Configuration for the GCP provisioner for device collections of GCP instances. At least one service account or project
               ID must be set.
        :param pulumi.Input['DeviceCollectionTpmArgs'] tpm: Configuration for a device collection of machines with TPMs.
        """
        if authority_id is not None:
            pulumi.set(__self__, "authority_id", authority_id)
        if aws_vm is not None:
            pulumi.set(__self__, "aws_vm", aws_vm)
        if azure_vm is not None:
            pulumi.set(__self__, "azure_vm", azure_vm)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if gcp_vm is not None:
            pulumi.set(__self__, "gcp_vm", gcp_vm)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if tpm is not None:
            pulumi.set(__self__, "tpm", tpm)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> Optional[pulumi.Input[str]]:
        """
        A UUID identifying the authority to issue certificates for the agent running on devices in the collection.
        """
        return pulumi.get(self, "authority_id")

    @authority_id.setter
    def authority_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authority_id", value)

    @property
    @pulumi.getter(name="awsVm")
    def aws_vm(self) -> Optional[pulumi.Input['DeviceCollectionAwsVmArgs']]:
        """
        Configuration for an AWS provisioner for a device collection of AWS VMs.
        """
        return pulumi.get(self, "aws_vm")

    @aws_vm.setter
    def aws_vm(self, value: Optional[pulumi.Input['DeviceCollectionAwsVmArgs']]):
        pulumi.set(self, "aws_vm", value)

    @property
    @pulumi.getter(name="azureVm")
    def azure_vm(self) -> Optional[pulumi.Input['DeviceCollectionAzureVmArgs']]:
        return pulumi.get(self, "azure_vm")

    @azure_vm.setter
    def azure_vm(self, value: Optional[pulumi.Input['DeviceCollectionAzureVmArgs']]):
        pulumi.set(self, "azure_vm", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Must match the deviceTypeConfiguration. Cannot be changed. Allowed values: `aws-vm` `azure-vm` `gcp-vm` `tpm`
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="gcpVm")
    def gcp_vm(self) -> Optional[pulumi.Input['DeviceCollectionGcpVmArgs']]:
        """
        Configuration for the GCP provisioner for device collections of GCP instances. At least one service account or project
        ID must be set.
        """
        return pulumi.get(self, "gcp_vm")

    @gcp_vm.setter
    def gcp_vm(self, value: Optional[pulumi.Input['DeviceCollectionGcpVmArgs']]):
        pulumi.set(self, "gcp_vm", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def tpm(self) -> Optional[pulumi.Input['DeviceCollectionTpmArgs']]:
        """
        Configuration for a device collection of machines with TPMs.
        """
        return pulumi.get(self, "tpm")

    @tpm.setter
    def tpm(self, value: Optional[pulumi.Input['DeviceCollectionTpmArgs']]):
        pulumi.set(self, "tpm", value)


class DeviceCollection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 aws_vm: Optional[pulumi.Input[Union['DeviceCollectionAwsVmArgs', 'DeviceCollectionAwsVmArgsDict']]] = None,
                 azure_vm: Optional[pulumi.Input[Union['DeviceCollectionAzureVmArgs', 'DeviceCollectionAzureVmArgsDict']]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 gcp_vm: Optional[pulumi.Input[Union['DeviceCollectionGcpVmArgs', 'DeviceCollectionGcpVmArgsDict']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 tpm: Optional[pulumi.Input[Union['DeviceCollectionTpmArgs', 'DeviceCollectionTpmArgsDict']]] = None,
                 __props__=None):
        """
        Create a DeviceCollection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the agent running on devices in the collection.
        :param pulumi.Input[Union['DeviceCollectionAwsVmArgs', 'DeviceCollectionAwsVmArgsDict']] aws_vm: Configuration for an AWS provisioner for a device collection of AWS VMs.
        :param pulumi.Input[str] device_type: Must match the deviceTypeConfiguration. Cannot be changed. Allowed values: `aws-vm` `azure-vm` `gcp-vm` `tpm`
        :param pulumi.Input[Union['DeviceCollectionGcpVmArgs', 'DeviceCollectionGcpVmArgsDict']] gcp_vm: Configuration for the GCP provisioner for device collections of GCP instances. At least one service account or project
               ID must be set.
        :param pulumi.Input[Union['DeviceCollectionTpmArgs', 'DeviceCollectionTpmArgsDict']] tpm: Configuration for a device collection of machines with TPMs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceCollectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DeviceCollection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DeviceCollectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceCollectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 aws_vm: Optional[pulumi.Input[Union['DeviceCollectionAwsVmArgs', 'DeviceCollectionAwsVmArgsDict']]] = None,
                 azure_vm: Optional[pulumi.Input[Union['DeviceCollectionAzureVmArgs', 'DeviceCollectionAzureVmArgsDict']]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 gcp_vm: Optional[pulumi.Input[Union['DeviceCollectionGcpVmArgs', 'DeviceCollectionGcpVmArgsDict']]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 tpm: Optional[pulumi.Input[Union['DeviceCollectionTpmArgs', 'DeviceCollectionTpmArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceCollectionArgs.__new__(DeviceCollectionArgs)

            if authority_id is None and not opts.urn:
                raise TypeError("Missing required property 'authority_id'")
            __props__.__dict__["authority_id"] = authority_id
            __props__.__dict__["aws_vm"] = aws_vm
            __props__.__dict__["azure_vm"] = azure_vm
            if device_type is None and not opts.urn:
                raise TypeError("Missing required property 'device_type'")
            __props__.__dict__["device_type"] = device_type
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["gcp_vm"] = gcp_vm
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            __props__.__dict__["tpm"] = tpm
        super(DeviceCollection, __self__).__init__(
            'smallstep:index/deviceCollection:DeviceCollection',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authority_id: Optional[pulumi.Input[str]] = None,
            aws_vm: Optional[pulumi.Input[Union['DeviceCollectionAwsVmArgs', 'DeviceCollectionAwsVmArgsDict']]] = None,
            azure_vm: Optional[pulumi.Input[Union['DeviceCollectionAzureVmArgs', 'DeviceCollectionAzureVmArgsDict']]] = None,
            device_type: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            gcp_vm: Optional[pulumi.Input[Union['DeviceCollectionGcpVmArgs', 'DeviceCollectionGcpVmArgsDict']]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            tpm: Optional[pulumi.Input[Union['DeviceCollectionTpmArgs', 'DeviceCollectionTpmArgsDict']]] = None) -> 'DeviceCollection':
        """
        Get an existing DeviceCollection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authority_id: A UUID identifying the authority to issue certificates for the agent running on devices in the collection.
        :param pulumi.Input[Union['DeviceCollectionAwsVmArgs', 'DeviceCollectionAwsVmArgsDict']] aws_vm: Configuration for an AWS provisioner for a device collection of AWS VMs.
        :param pulumi.Input[str] device_type: Must match the deviceTypeConfiguration. Cannot be changed. Allowed values: `aws-vm` `azure-vm` `gcp-vm` `tpm`
        :param pulumi.Input[Union['DeviceCollectionGcpVmArgs', 'DeviceCollectionGcpVmArgsDict']] gcp_vm: Configuration for the GCP provisioner for device collections of GCP instances. At least one service account or project
               ID must be set.
        :param pulumi.Input[Union['DeviceCollectionTpmArgs', 'DeviceCollectionTpmArgsDict']] tpm: Configuration for a device collection of machines with TPMs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceCollectionState.__new__(_DeviceCollectionState)

        __props__.__dict__["authority_id"] = authority_id
        __props__.__dict__["aws_vm"] = aws_vm
        __props__.__dict__["azure_vm"] = azure_vm
        __props__.__dict__["device_type"] = device_type
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["gcp_vm"] = gcp_vm
        __props__.__dict__["slug"] = slug
        __props__.__dict__["tpm"] = tpm
        return DeviceCollection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> pulumi.Output[str]:
        """
        A UUID identifying the authority to issue certificates for the agent running on devices in the collection.
        """
        return pulumi.get(self, "authority_id")

    @property
    @pulumi.getter(name="awsVm")
    def aws_vm(self) -> pulumi.Output[Optional['outputs.DeviceCollectionAwsVm']]:
        """
        Configuration for an AWS provisioner for a device collection of AWS VMs.
        """
        return pulumi.get(self, "aws_vm")

    @property
    @pulumi.getter(name="azureVm")
    def azure_vm(self) -> pulumi.Output[Optional['outputs.DeviceCollectionAzureVm']]:
        return pulumi.get(self, "azure_vm")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Output[str]:
        """
        Must match the deviceTypeConfiguration. Cannot be changed. Allowed values: `aws-vm` `azure-vm` `gcp-vm` `tpm`
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="gcpVm")
    def gcp_vm(self) -> pulumi.Output[Optional['outputs.DeviceCollectionGcpVm']]:
        """
        Configuration for the GCP provisioner for device collections of GCP instances. At least one service account or project
        ID must be set.
        """
        return pulumi.get(self, "gcp_vm")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def tpm(self) -> pulumi.Output[Optional['outputs.DeviceCollectionTpm']]:
        """
        Configuration for a device collection of machines with TPMs.
        """
        return pulumi.get(self, "tpm")

