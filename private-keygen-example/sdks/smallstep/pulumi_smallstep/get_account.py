# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAccountResult',
    'AwaitableGetAccountResult',
    'get_account',
    'get_account_output',
]

@pulumi.output_type
class GetAccountResult:
    """
    A collection of values returned by getAccount.
    """
    def __init__(__self__, browser=None, ethernet=None, id=None, name=None, vpn=None, wifi=None):
        if browser and not isinstance(browser, dict):
            raise TypeError("Expected argument 'browser' to be a dict")
        pulumi.set(__self__, "browser", browser)
        if ethernet and not isinstance(ethernet, dict):
            raise TypeError("Expected argument 'ethernet' to be a dict")
        pulumi.set(__self__, "ethernet", ethernet)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if vpn and not isinstance(vpn, dict):
            raise TypeError("Expected argument 'vpn' to be a dict")
        pulumi.set(__self__, "vpn", vpn)
        if wifi and not isinstance(wifi, dict):
            raise TypeError("Expected argument 'wifi' to be a dict")
        pulumi.set(__self__, "wifi", wifi)

    @property
    @pulumi.getter
    def browser(self) -> 'outputs.GetAccountBrowserResult':
        return pulumi.get(self, "browser")

    @property
    @pulumi.getter
    def ethernet(self) -> 'outputs.GetAccountEthernetResult':
        return pulumi.get(self, "ethernet")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vpn(self) -> 'outputs.GetAccountVpnResult':
        return pulumi.get(self, "vpn")

    @property
    @pulumi.getter
    def wifi(self) -> 'outputs.GetAccountWifiResult':
        return pulumi.get(self, "wifi")


class AwaitableGetAccountResult(GetAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountResult(
            browser=self.browser,
            ethernet=self.ethernet,
            id=self.id,
            name=self.name,
            vpn=self.vpn,
            wifi=self.wifi)


def get_account(id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('smallstep:index/getAccount:getAccount', __args__, opts=opts, typ=GetAccountResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAccountResult(
        browser=pulumi.get(__ret__, 'browser'),
        ethernet=pulumi.get(__ret__, 'ethernet'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        vpn=pulumi.get(__ret__, 'vpn'),
        wifi=pulumi.get(__ret__, 'wifi'))
def get_account_output(id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccountResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('smallstep:index/getAccount:getAccount', __args__, opts=opts, typ=GetAccountResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAccountResult(
        browser=pulumi.get(__response__, 'browser'),
        ethernet=pulumi.get(__response__, 'ethernet'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        vpn=pulumi.get(__response__, 'vpn'),
        wifi=pulumi.get(__response__, 'wifi')))
