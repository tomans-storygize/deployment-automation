# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccountArgs', 'Account']

@pulumi.input_type
class AccountArgs:
    def __init__(__self__, *,
                 browser: Optional[pulumi.Input['AccountBrowserArgs']] = None,
                 ethernet: Optional[pulumi.Input['AccountEthernetArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vpn: Optional[pulumi.Input['AccountVpnArgs']] = None,
                 wifi: Optional[pulumi.Input['AccountWifiArgs']] = None):
        """
        The set of arguments for constructing a Account resource.
        :param pulumi.Input['AccountBrowserArgs'] browser: Configuration to use a client certificate.
        :param pulumi.Input['AccountEthernetArgs'] ethernet: Configuration to connect a device to a protected LAN.
        :param pulumi.Input['AccountVpnArgs'] vpn: Configuration to connect a device to a VPN.
        :param pulumi.Input['AccountWifiArgs'] wifi: Configuration to connect a device to a protected WiFi network.
        """
        if browser is not None:
            pulumi.set(__self__, "browser", browser)
        if ethernet is not None:
            pulumi.set(__self__, "ethernet", ethernet)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if wifi is not None:
            pulumi.set(__self__, "wifi", wifi)

    @property
    @pulumi.getter
    def browser(self) -> Optional[pulumi.Input['AccountBrowserArgs']]:
        """
        Configuration to use a client certificate.
        """
        return pulumi.get(self, "browser")

    @browser.setter
    def browser(self, value: Optional[pulumi.Input['AccountBrowserArgs']]):
        pulumi.set(self, "browser", value)

    @property
    @pulumi.getter
    def ethernet(self) -> Optional[pulumi.Input['AccountEthernetArgs']]:
        """
        Configuration to connect a device to a protected LAN.
        """
        return pulumi.get(self, "ethernet")

    @ethernet.setter
    def ethernet(self, value: Optional[pulumi.Input['AccountEthernetArgs']]):
        pulumi.set(self, "ethernet", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input['AccountVpnArgs']]:
        """
        Configuration to connect a device to a VPN.
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input['AccountVpnArgs']]):
        pulumi.set(self, "vpn", value)

    @property
    @pulumi.getter
    def wifi(self) -> Optional[pulumi.Input['AccountWifiArgs']]:
        """
        Configuration to connect a device to a protected WiFi network.
        """
        return pulumi.get(self, "wifi")

    @wifi.setter
    def wifi(self, value: Optional[pulumi.Input['AccountWifiArgs']]):
        pulumi.set(self, "wifi", value)


@pulumi.input_type
class _AccountState:
    def __init__(__self__, *,
                 browser: Optional[pulumi.Input['AccountBrowserArgs']] = None,
                 ethernet: Optional[pulumi.Input['AccountEthernetArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vpn: Optional[pulumi.Input['AccountVpnArgs']] = None,
                 wifi: Optional[pulumi.Input['AccountWifiArgs']] = None):
        """
        Input properties used for looking up and filtering Account resources.
        :param pulumi.Input['AccountBrowserArgs'] browser: Configuration to use a client certificate.
        :param pulumi.Input['AccountEthernetArgs'] ethernet: Configuration to connect a device to a protected LAN.
        :param pulumi.Input['AccountVpnArgs'] vpn: Configuration to connect a device to a VPN.
        :param pulumi.Input['AccountWifiArgs'] wifi: Configuration to connect a device to a protected WiFi network.
        """
        if browser is not None:
            pulumi.set(__self__, "browser", browser)
        if ethernet is not None:
            pulumi.set(__self__, "ethernet", ethernet)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)
        if wifi is not None:
            pulumi.set(__self__, "wifi", wifi)

    @property
    @pulumi.getter
    def browser(self) -> Optional[pulumi.Input['AccountBrowserArgs']]:
        """
        Configuration to use a client certificate.
        """
        return pulumi.get(self, "browser")

    @browser.setter
    def browser(self, value: Optional[pulumi.Input['AccountBrowserArgs']]):
        pulumi.set(self, "browser", value)

    @property
    @pulumi.getter
    def ethernet(self) -> Optional[pulumi.Input['AccountEthernetArgs']]:
        """
        Configuration to connect a device to a protected LAN.
        """
        return pulumi.get(self, "ethernet")

    @ethernet.setter
    def ethernet(self, value: Optional[pulumi.Input['AccountEthernetArgs']]):
        pulumi.set(self, "ethernet", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input['AccountVpnArgs']]:
        """
        Configuration to connect a device to a VPN.
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input['AccountVpnArgs']]):
        pulumi.set(self, "vpn", value)

    @property
    @pulumi.getter
    def wifi(self) -> Optional[pulumi.Input['AccountWifiArgs']]:
        """
        Configuration to connect a device to a protected WiFi network.
        """
        return pulumi.get(self, "wifi")

    @wifi.setter
    def wifi(self, value: Optional[pulumi.Input['AccountWifiArgs']]):
        pulumi.set(self, "wifi", value)


class Account(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 browser: Optional[pulumi.Input[Union['AccountBrowserArgs', 'AccountBrowserArgsDict']]] = None,
                 ethernet: Optional[pulumi.Input[Union['AccountEthernetArgs', 'AccountEthernetArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vpn: Optional[pulumi.Input[Union['AccountVpnArgs', 'AccountVpnArgsDict']]] = None,
                 wifi: Optional[pulumi.Input[Union['AccountWifiArgs', 'AccountWifiArgsDict']]] = None,
                 __props__=None):
        """
        Create a Account resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AccountBrowserArgs', 'AccountBrowserArgsDict']] browser: Configuration to use a client certificate.
        :param pulumi.Input[Union['AccountEthernetArgs', 'AccountEthernetArgsDict']] ethernet: Configuration to connect a device to a protected LAN.
        :param pulumi.Input[Union['AccountVpnArgs', 'AccountVpnArgsDict']] vpn: Configuration to connect a device to a VPN.
        :param pulumi.Input[Union['AccountWifiArgs', 'AccountWifiArgsDict']] wifi: Configuration to connect a device to a protected WiFi network.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AccountArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Account resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 browser: Optional[pulumi.Input[Union['AccountBrowserArgs', 'AccountBrowserArgsDict']]] = None,
                 ethernet: Optional[pulumi.Input[Union['AccountEthernetArgs', 'AccountEthernetArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vpn: Optional[pulumi.Input[Union['AccountVpnArgs', 'AccountVpnArgsDict']]] = None,
                 wifi: Optional[pulumi.Input[Union['AccountWifiArgs', 'AccountWifiArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountArgs.__new__(AccountArgs)

            __props__.__dict__["browser"] = browser
            __props__.__dict__["ethernet"] = ethernet
            __props__.__dict__["name"] = name
            __props__.__dict__["vpn"] = vpn
            __props__.__dict__["wifi"] = wifi
        super(Account, __self__).__init__(
            'smallstep:index/account:Account',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            browser: Optional[pulumi.Input[Union['AccountBrowserArgs', 'AccountBrowserArgsDict']]] = None,
            ethernet: Optional[pulumi.Input[Union['AccountEthernetArgs', 'AccountEthernetArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            vpn: Optional[pulumi.Input[Union['AccountVpnArgs', 'AccountVpnArgsDict']]] = None,
            wifi: Optional[pulumi.Input[Union['AccountWifiArgs', 'AccountWifiArgsDict']]] = None) -> 'Account':
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AccountBrowserArgs', 'AccountBrowserArgsDict']] browser: Configuration to use a client certificate.
        :param pulumi.Input[Union['AccountEthernetArgs', 'AccountEthernetArgsDict']] ethernet: Configuration to connect a device to a protected LAN.
        :param pulumi.Input[Union['AccountVpnArgs', 'AccountVpnArgsDict']] vpn: Configuration to connect a device to a VPN.
        :param pulumi.Input[Union['AccountWifiArgs', 'AccountWifiArgsDict']] wifi: Configuration to connect a device to a protected WiFi network.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountState.__new__(_AccountState)

        __props__.__dict__["browser"] = browser
        __props__.__dict__["ethernet"] = ethernet
        __props__.__dict__["name"] = name
        __props__.__dict__["vpn"] = vpn
        __props__.__dict__["wifi"] = wifi
        return Account(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def browser(self) -> pulumi.Output[Optional['outputs.AccountBrowser']]:
        """
        Configuration to use a client certificate.
        """
        return pulumi.get(self, "browser")

    @property
    @pulumi.getter
    def ethernet(self) -> pulumi.Output[Optional['outputs.AccountEthernet']]:
        """
        Configuration to connect a device to a protected LAN.
        """
        return pulumi.get(self, "ethernet")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vpn(self) -> pulumi.Output[Optional['outputs.AccountVpn']]:
        """
        Configuration to connect a device to a VPN.
        """
        return pulumi.get(self, "vpn")

    @property
    @pulumi.getter
    def wifi(self) -> pulumi.Output[Optional['outputs.AccountWifi']]:
        """
        Configuration to connect a device to a protected WiFi network.
        """
        return pulumi.get(self, "wifi")

