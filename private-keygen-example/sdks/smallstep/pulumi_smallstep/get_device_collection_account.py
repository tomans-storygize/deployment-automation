# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDeviceCollectionAccountResult',
    'AwaitableGetDeviceCollectionAccountResult',
    'get_device_collection_account',
    'get_device_collection_account_output',
]

@pulumi.output_type
class GetDeviceCollectionAccountResult:
    """
    A collection of values returned by getDeviceCollectionAccount.
    """
    def __init__(__self__, account_id=None, authority_id=None, certificate_data=None, certificate_info=None, device_collection_slug=None, display_name=None, id=None, key_info=None, reload_info=None, slug=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if authority_id and not isinstance(authority_id, str):
            raise TypeError("Expected argument 'authority_id' to be a str")
        pulumi.set(__self__, "authority_id", authority_id)
        if certificate_data and not isinstance(certificate_data, dict):
            raise TypeError("Expected argument 'certificate_data' to be a dict")
        pulumi.set(__self__, "certificate_data", certificate_data)
        if certificate_info and not isinstance(certificate_info, dict):
            raise TypeError("Expected argument 'certificate_info' to be a dict")
        pulumi.set(__self__, "certificate_info", certificate_info)
        if device_collection_slug and not isinstance(device_collection_slug, str):
            raise TypeError("Expected argument 'device_collection_slug' to be a str")
        pulumi.set(__self__, "device_collection_slug", device_collection_slug)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_info and not isinstance(key_info, dict):
            raise TypeError("Expected argument 'key_info' to be a dict")
        pulumi.set(__self__, "key_info", key_info)
        if reload_info and not isinstance(reload_info, dict):
            raise TypeError("Expected argument 'reload_info' to be a dict")
        pulumi.set(__self__, "reload_info", reload_info)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> Optional[str]:
        return pulumi.get(self, "authority_id")

    @property
    @pulumi.getter(name="certificateData")
    def certificate_data(self) -> Optional['outputs.GetDeviceCollectionAccountCertificateDataResult']:
        return pulumi.get(self, "certificate_data")

    @property
    @pulumi.getter(name="certificateInfo")
    def certificate_info(self) -> Optional['outputs.GetDeviceCollectionAccountCertificateInfoResult']:
        return pulumi.get(self, "certificate_info")

    @property
    @pulumi.getter(name="deviceCollectionSlug")
    def device_collection_slug(self) -> str:
        return pulumi.get(self, "device_collection_slug")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyInfo")
    def key_info(self) -> Optional['outputs.GetDeviceCollectionAccountKeyInfoResult']:
        return pulumi.get(self, "key_info")

    @property
    @pulumi.getter(name="reloadInfo")
    def reload_info(self) -> Optional['outputs.GetDeviceCollectionAccountReloadInfoResult']:
        return pulumi.get(self, "reload_info")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


class AwaitableGetDeviceCollectionAccountResult(GetDeviceCollectionAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceCollectionAccountResult(
            account_id=self.account_id,
            authority_id=self.authority_id,
            certificate_data=self.certificate_data,
            certificate_info=self.certificate_info,
            device_collection_slug=self.device_collection_slug,
            display_name=self.display_name,
            id=self.id,
            key_info=self.key_info,
            reload_info=self.reload_info,
            slug=self.slug)


def get_device_collection_account(account_id: Optional[str] = None,
                                  authority_id: Optional[str] = None,
                                  certificate_data: Optional[Union['GetDeviceCollectionAccountCertificateDataArgs', 'GetDeviceCollectionAccountCertificateDataArgsDict']] = None,
                                  certificate_info: Optional[Union['GetDeviceCollectionAccountCertificateInfoArgs', 'GetDeviceCollectionAccountCertificateInfoArgsDict']] = None,
                                  device_collection_slug: Optional[str] = None,
                                  display_name: Optional[str] = None,
                                  key_info: Optional[Union['GetDeviceCollectionAccountKeyInfoArgs', 'GetDeviceCollectionAccountKeyInfoArgsDict']] = None,
                                  reload_info: Optional[Union['GetDeviceCollectionAccountReloadInfoArgs', 'GetDeviceCollectionAccountReloadInfoArgsDict']] = None,
                                  slug: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceCollectionAccountResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['authorityId'] = authority_id
    __args__['certificateData'] = certificate_data
    __args__['certificateInfo'] = certificate_info
    __args__['deviceCollectionSlug'] = device_collection_slug
    __args__['displayName'] = display_name
    __args__['keyInfo'] = key_info
    __args__['reloadInfo'] = reload_info
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('smallstep:index/getDeviceCollectionAccount:getDeviceCollectionAccount', __args__, opts=opts, typ=GetDeviceCollectionAccountResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDeviceCollectionAccountResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        authority_id=pulumi.get(__ret__, 'authority_id'),
        certificate_data=pulumi.get(__ret__, 'certificate_data'),
        certificate_info=pulumi.get(__ret__, 'certificate_info'),
        device_collection_slug=pulumi.get(__ret__, 'device_collection_slug'),
        display_name=pulumi.get(__ret__, 'display_name'),
        id=pulumi.get(__ret__, 'id'),
        key_info=pulumi.get(__ret__, 'key_info'),
        reload_info=pulumi.get(__ret__, 'reload_info'),
        slug=pulumi.get(__ret__, 'slug'))
def get_device_collection_account_output(account_id: Optional[pulumi.Input[Optional[str]]] = None,
                                         authority_id: Optional[pulumi.Input[Optional[str]]] = None,
                                         certificate_data: Optional[pulumi.Input[Optional[Union['GetDeviceCollectionAccountCertificateDataArgs', 'GetDeviceCollectionAccountCertificateDataArgsDict']]]] = None,
                                         certificate_info: Optional[pulumi.Input[Optional[Union['GetDeviceCollectionAccountCertificateInfoArgs', 'GetDeviceCollectionAccountCertificateInfoArgsDict']]]] = None,
                                         device_collection_slug: Optional[pulumi.Input[str]] = None,
                                         display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                         key_info: Optional[pulumi.Input[Optional[Union['GetDeviceCollectionAccountKeyInfoArgs', 'GetDeviceCollectionAccountKeyInfoArgsDict']]]] = None,
                                         reload_info: Optional[pulumi.Input[Optional[Union['GetDeviceCollectionAccountReloadInfoArgs', 'GetDeviceCollectionAccountReloadInfoArgsDict']]]] = None,
                                         slug: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeviceCollectionAccountResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['authorityId'] = authority_id
    __args__['certificateData'] = certificate_data
    __args__['certificateInfo'] = certificate_info
    __args__['deviceCollectionSlug'] = device_collection_slug
    __args__['displayName'] = display_name
    __args__['keyInfo'] = key_info
    __args__['reloadInfo'] = reload_info
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('smallstep:index/getDeviceCollectionAccount:getDeviceCollectionAccount', __args__, opts=opts, typ=GetDeviceCollectionAccountResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDeviceCollectionAccountResult(
        account_id=pulumi.get(__response__, 'account_id'),
        authority_id=pulumi.get(__response__, 'authority_id'),
        certificate_data=pulumi.get(__response__, 'certificate_data'),
        certificate_info=pulumi.get(__response__, 'certificate_info'),
        device_collection_slug=pulumi.get(__response__, 'device_collection_slug'),
        display_name=pulumi.get(__response__, 'display_name'),
        id=pulumi.get(__response__, 'id'),
        key_info=pulumi.get(__response__, 'key_info'),
        reload_info=pulumi.get(__response__, 'reload_info'),
        slug=pulumi.get(__response__, 'slug')))
