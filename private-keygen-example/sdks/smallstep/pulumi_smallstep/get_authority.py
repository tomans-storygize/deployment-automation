# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAuthorityResult',
    'AwaitableGetAuthorityResult',
    'get_authority',
    'get_authority_output',
]

@pulumi.output_type
class GetAuthorityResult:
    """
    A collection of values returned by getAuthority.
    """
    def __init__(__self__, active_revocation=None, admin_emails=None, created_at=None, domain=None, fingerprint=None, id=None, name=None, root=None, type=None):
        if active_revocation and not isinstance(active_revocation, bool):
            raise TypeError("Expected argument 'active_revocation' to be a bool")
        pulumi.set(__self__, "active_revocation", active_revocation)
        if admin_emails and not isinstance(admin_emails, list):
            raise TypeError("Expected argument 'admin_emails' to be a list")
        pulumi.set(__self__, "admin_emails", admin_emails)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if fingerprint and not isinstance(fingerprint, str):
            raise TypeError("Expected argument 'fingerprint' to be a str")
        pulumi.set(__self__, "fingerprint", fingerprint)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if root and not isinstance(root, str):
            raise TypeError("Expected argument 'root' to be a str")
        pulumi.set(__self__, "root", root)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="activeRevocation")
    def active_revocation(self) -> bool:
        return pulumi.get(self, "active_revocation")

    @property
    @pulumi.getter(name="adminEmails")
    def admin_emails(self) -> Sequence[str]:
        return pulumi.get(self, "admin_emails")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def root(self) -> str:
        return pulumi.get(self, "root")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetAuthorityResult(GetAuthorityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorityResult(
            active_revocation=self.active_revocation,
            admin_emails=self.admin_emails,
            created_at=self.created_at,
            domain=self.domain,
            fingerprint=self.fingerprint,
            id=self.id,
            name=self.name,
            root=self.root,
            type=self.type)


def get_authority(domain: Optional[str] = None,
                  id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorityResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('smallstep:index/getAuthority:getAuthority', __args__, opts=opts, typ=GetAuthorityResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAuthorityResult(
        active_revocation=pulumi.get(__ret__, 'active_revocation'),
        admin_emails=pulumi.get(__ret__, 'admin_emails'),
        created_at=pulumi.get(__ret__, 'created_at'),
        domain=pulumi.get(__ret__, 'domain'),
        fingerprint=pulumi.get(__ret__, 'fingerprint'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        root=pulumi.get(__ret__, 'root'),
        type=pulumi.get(__ret__, 'type'))
def get_authority_output(domain: Optional[pulumi.Input[Optional[str]]] = None,
                         id: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuthorityResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('smallstep:index/getAuthority:getAuthority', __args__, opts=opts, typ=GetAuthorityResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAuthorityResult(
        active_revocation=pulumi.get(__response__, 'active_revocation'),
        admin_emails=pulumi.get(__response__, 'admin_emails'),
        created_at=pulumi.get(__response__, 'created_at'),
        domain=pulumi.get(__response__, 'domain'),
        fingerprint=pulumi.get(__response__, 'fingerprint'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        root=pulumi.get(__response__, 'root'),
        type=pulumi.get(__response__, 'type')))
