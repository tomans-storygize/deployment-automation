# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AttestationAuthorityArgs', 'AttestationAuthority']

@pulumi.input_type
class AttestationAuthorityArgs:
    def __init__(__self__, *,
                 attestor_roots: pulumi.Input[str],
                 attestor_intermediates: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AttestationAuthority resource.
        :param pulumi.Input[str] attestor_roots: The pem-encoded list of certificates used to verify the attestation certificates submitted by devices.
        :param pulumi.Input[str] attestor_intermediates: The pem-encoded list of intermediate certificates used to build a chain of trust to verify the attestation certificates
               submitted by devices.
        :param pulumi.Input[str] name: The name of the attestation authority.
        """
        pulumi.set(__self__, "attestor_roots", attestor_roots)
        if attestor_intermediates is not None:
            pulumi.set(__self__, "attestor_intermediates", attestor_intermediates)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="attestorRoots")
    def attestor_roots(self) -> pulumi.Input[str]:
        """
        The pem-encoded list of certificates used to verify the attestation certificates submitted by devices.
        """
        return pulumi.get(self, "attestor_roots")

    @attestor_roots.setter
    def attestor_roots(self, value: pulumi.Input[str]):
        pulumi.set(self, "attestor_roots", value)

    @property
    @pulumi.getter(name="attestorIntermediates")
    def attestor_intermediates(self) -> Optional[pulumi.Input[str]]:
        """
        The pem-encoded list of intermediate certificates used to build a chain of trust to verify the attestation certificates
        submitted by devices.
        """
        return pulumi.get(self, "attestor_intermediates")

    @attestor_intermediates.setter
    def attestor_intermediates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attestor_intermediates", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the attestation authority.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AttestationAuthorityState:
    def __init__(__self__, *,
                 attestor_intermediates: Optional[pulumi.Input[str]] = None,
                 attestor_roots: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 root: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AttestationAuthority resources.
        :param pulumi.Input[str] attestor_intermediates: The pem-encoded list of intermediate certificates used to build a chain of trust to verify the attestation certificates
               submitted by devices.
        :param pulumi.Input[str] attestor_roots: The pem-encoded list of certificates used to verify the attestation certificates submitted by devices.
        :param pulumi.Input[str] created_at: Timestamp in RFC3339 format when the attestation authority was created.
        :param pulumi.Input[str] name: The name of the attestation authority.
        :param pulumi.Input[str] root: The pem-encoded root certificate of this attestation authority. This is generated server-side when the attestation
               authority is created. This certificate should be used in the `attestationRoots` field of an ACME_ATTESTATION provisioner
               with the `tpm` format.
        :param pulumi.Input[str] slug: A short name for this attestation authority. Read only.
        """
        if attestor_intermediates is not None:
            pulumi.set(__self__, "attestor_intermediates", attestor_intermediates)
        if attestor_roots is not None:
            pulumi.set(__self__, "attestor_roots", attestor_roots)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if root is not None:
            pulumi.set(__self__, "root", root)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="attestorIntermediates")
    def attestor_intermediates(self) -> Optional[pulumi.Input[str]]:
        """
        The pem-encoded list of intermediate certificates used to build a chain of trust to verify the attestation certificates
        submitted by devices.
        """
        return pulumi.get(self, "attestor_intermediates")

    @attestor_intermediates.setter
    def attestor_intermediates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attestor_intermediates", value)

    @property
    @pulumi.getter(name="attestorRoots")
    def attestor_roots(self) -> Optional[pulumi.Input[str]]:
        """
        The pem-encoded list of certificates used to verify the attestation certificates submitted by devices.
        """
        return pulumi.get(self, "attestor_roots")

    @attestor_roots.setter
    def attestor_roots(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attestor_roots", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp in RFC3339 format when the attestation authority was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the attestation authority.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def root(self) -> Optional[pulumi.Input[str]]:
        """
        The pem-encoded root certificate of this attestation authority. This is generated server-side when the attestation
        authority is created. This certificate should be used in the `attestationRoots` field of an ACME_ATTESTATION provisioner
        with the `tpm` format.
        """
        return pulumi.get(self, "root")

    @root.setter
    def root(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        A short name for this attestation authority. Read only.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


class AttestationAuthority(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attestor_intermediates: Optional[pulumi.Input[str]] = None,
                 attestor_roots: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a AttestationAuthority resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] attestor_intermediates: The pem-encoded list of intermediate certificates used to build a chain of trust to verify the attestation certificates
               submitted by devices.
        :param pulumi.Input[str] attestor_roots: The pem-encoded list of certificates used to verify the attestation certificates submitted by devices.
        :param pulumi.Input[str] name: The name of the attestation authority.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AttestationAuthorityArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AttestationAuthority resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AttestationAuthorityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AttestationAuthorityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attestor_intermediates: Optional[pulumi.Input[str]] = None,
                 attestor_roots: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AttestationAuthorityArgs.__new__(AttestationAuthorityArgs)

            __props__.__dict__["attestor_intermediates"] = attestor_intermediates
            if attestor_roots is None and not opts.urn:
                raise TypeError("Missing required property 'attestor_roots'")
            __props__.__dict__["attestor_roots"] = attestor_roots
            __props__.__dict__["name"] = name
            __props__.__dict__["created_at"] = None
            __props__.__dict__["root"] = None
            __props__.__dict__["slug"] = None
        super(AttestationAuthority, __self__).__init__(
            'smallstep:index/attestationAuthority:AttestationAuthority',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attestor_intermediates: Optional[pulumi.Input[str]] = None,
            attestor_roots: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            root: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None) -> 'AttestationAuthority':
        """
        Get an existing AttestationAuthority resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] attestor_intermediates: The pem-encoded list of intermediate certificates used to build a chain of trust to verify the attestation certificates
               submitted by devices.
        :param pulumi.Input[str] attestor_roots: The pem-encoded list of certificates used to verify the attestation certificates submitted by devices.
        :param pulumi.Input[str] created_at: Timestamp in RFC3339 format when the attestation authority was created.
        :param pulumi.Input[str] name: The name of the attestation authority.
        :param pulumi.Input[str] root: The pem-encoded root certificate of this attestation authority. This is generated server-side when the attestation
               authority is created. This certificate should be used in the `attestationRoots` field of an ACME_ATTESTATION provisioner
               with the `tpm` format.
        :param pulumi.Input[str] slug: A short name for this attestation authority. Read only.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AttestationAuthorityState.__new__(_AttestationAuthorityState)

        __props__.__dict__["attestor_intermediates"] = attestor_intermediates
        __props__.__dict__["attestor_roots"] = attestor_roots
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["name"] = name
        __props__.__dict__["root"] = root
        __props__.__dict__["slug"] = slug
        return AttestationAuthority(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attestorIntermediates")
    def attestor_intermediates(self) -> pulumi.Output[Optional[str]]:
        """
        The pem-encoded list of intermediate certificates used to build a chain of trust to verify the attestation certificates
        submitted by devices.
        """
        return pulumi.get(self, "attestor_intermediates")

    @property
    @pulumi.getter(name="attestorRoots")
    def attestor_roots(self) -> pulumi.Output[str]:
        """
        The pem-encoded list of certificates used to verify the attestation certificates submitted by devices.
        """
        return pulumi.get(self, "attestor_roots")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Timestamp in RFC3339 format when the attestation authority was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the attestation authority.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def root(self) -> pulumi.Output[str]:
        """
        The pem-encoded root certificate of this attestation authority. This is generated server-side when the attestation
        authority is created. This certificate should be used in the `attestationRoots` field of an ACME_ATTESTATION provisioner
        with the `tpm` format.
        """
        return pulumi.get(self, "root")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        A short name for this attestation authority. Read only.
        """
        return pulumi.get(self, "slug")

