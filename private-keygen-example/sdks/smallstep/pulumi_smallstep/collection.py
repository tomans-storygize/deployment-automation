# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CollectionArgs', 'Collection']

@pulumi.input_type
class CollectionArgs:
    def __init__(__self__, *,
                 slug: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None,
                 schema_uri: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Collection resource.
        :param pulumi.Input[str] slug: A lowercase name identifying the collection.
        :param pulumi.Input[str] display_name: A user-friendly name for the collection.
        :param pulumi.Input[str] schema_uri: Reference to a schema that all instances in the collection must conform to.
        """
        pulumi.set(__self__, "slug", slug)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if schema_uri is not None:
            pulumi.set(__self__, "schema_uri", schema_uri)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        """
        A lowercase name identifying the collection.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        A user-friendly name for the collection.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="schemaUri")
    def schema_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a schema that all instances in the collection must conform to.
        """
        return pulumi.get(self, "schema_uri")

    @schema_uri.setter
    def schema_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_uri", value)


@pulumi.input_type
class _CollectionState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[float]] = None,
                 schema_uri: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Collection resources.
        :param pulumi.Input[str] created_at: Timestamp in RFC3339 format when the collections was created
        :param pulumi.Input[str] display_name: A user-friendly name for the collection.
        :param pulumi.Input[float] instance_count: The number of instances in the collection.
        :param pulumi.Input[str] schema_uri: Reference to a schema that all instances in the collection must conform to.
        :param pulumi.Input[str] slug: A lowercase name identifying the collection.
        :param pulumi.Input[str] updated_at: Timestamp in RFC3339 format when the collections was last updated
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if schema_uri is not None:
            pulumi.set(__self__, "schema_uri", schema_uri)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp in RFC3339 format when the collections was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        A user-friendly name for the collection.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[float]]:
        """
        The number of instances in the collection.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="schemaUri")
    def schema_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to a schema that all instances in the collection must conform to.
        """
        return pulumi.get(self, "schema_uri")

    @schema_uri.setter
    def schema_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_uri", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        A lowercase name identifying the collection.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp in RFC3339 format when the collections was last updated
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class Collection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 schema_uri: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Collection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: A user-friendly name for the collection.
        :param pulumi.Input[str] schema_uri: Reference to a schema that all instances in the collection must conform to.
        :param pulumi.Input[str] slug: A lowercase name identifying the collection.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CollectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Collection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CollectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CollectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 schema_uri: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CollectionArgs.__new__(CollectionArgs)

            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["schema_uri"] = schema_uri
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            __props__.__dict__["created_at"] = None
            __props__.__dict__["instance_count"] = None
            __props__.__dict__["updated_at"] = None
        super(Collection, __self__).__init__(
            'smallstep:index/collection:Collection',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            instance_count: Optional[pulumi.Input[float]] = None,
            schema_uri: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'Collection':
        """
        Get an existing Collection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: Timestamp in RFC3339 format when the collections was created
        :param pulumi.Input[str] display_name: A user-friendly name for the collection.
        :param pulumi.Input[float] instance_count: The number of instances in the collection.
        :param pulumi.Input[str] schema_uri: Reference to a schema that all instances in the collection must conform to.
        :param pulumi.Input[str] slug: A lowercase name identifying the collection.
        :param pulumi.Input[str] updated_at: Timestamp in RFC3339 format when the collections was last updated
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CollectionState.__new__(_CollectionState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["instance_count"] = instance_count
        __props__.__dict__["schema_uri"] = schema_uri
        __props__.__dict__["slug"] = slug
        __props__.__dict__["updated_at"] = updated_at
        return Collection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Timestamp in RFC3339 format when the collections was created
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        A user-friendly name for the collection.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Output[float]:
        """
        The number of instances in the collection.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="schemaUri")
    def schema_uri(self) -> pulumi.Output[Optional[str]]:
        """
        Reference to a schema that all instances in the collection must conform to.
        """
        return pulumi.get(self, "schema_uri")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        A lowercase name identifying the collection.
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Timestamp in RFC3339 format when the collections was last updated
        """
        return pulumi.get(self, "updated_at")

