# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetProvisionerWebhookResult',
    'AwaitableGetProvisionerWebhookResult',
    'get_provisioner_webhook',
    'get_provisioner_webhook_output',
]

@pulumi.output_type
class GetProvisionerWebhookResult:
    """
    A collection of values returned by getProvisionerWebhook.
    """
    def __init__(__self__, authority_id=None, cert_type=None, disable_tls_client_auth=None, id=None, kind=None, name=None, provisioner_id=None, server_type=None, url=None):
        if authority_id and not isinstance(authority_id, str):
            raise TypeError("Expected argument 'authority_id' to be a str")
        pulumi.set(__self__, "authority_id", authority_id)
        if cert_type and not isinstance(cert_type, str):
            raise TypeError("Expected argument 'cert_type' to be a str")
        pulumi.set(__self__, "cert_type", cert_type)
        if disable_tls_client_auth and not isinstance(disable_tls_client_auth, bool):
            raise TypeError("Expected argument 'disable_tls_client_auth' to be a bool")
        pulumi.set(__self__, "disable_tls_client_auth", disable_tls_client_auth)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provisioner_id and not isinstance(provisioner_id, str):
            raise TypeError("Expected argument 'provisioner_id' to be a str")
        pulumi.set(__self__, "provisioner_id", provisioner_id)
        if server_type and not isinstance(server_type, str):
            raise TypeError("Expected argument 'server_type' to be a str")
        pulumi.set(__self__, "server_type", server_type)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> str:
        return pulumi.get(self, "authority_id")

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> str:
        return pulumi.get(self, "cert_type")

    @property
    @pulumi.getter(name="disableTlsClientAuth")
    def disable_tls_client_auth(self) -> bool:
        return pulumi.get(self, "disable_tls_client_auth")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisionerId")
    def provisioner_id(self) -> str:
        return pulumi.get(self, "provisioner_id")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> str:
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


class AwaitableGetProvisionerWebhookResult(GetProvisionerWebhookResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProvisionerWebhookResult(
            authority_id=self.authority_id,
            cert_type=self.cert_type,
            disable_tls_client_auth=self.disable_tls_client_auth,
            id=self.id,
            kind=self.kind,
            name=self.name,
            provisioner_id=self.provisioner_id,
            server_type=self.server_type,
            url=self.url)


def get_provisioner_webhook(authority_id: Optional[str] = None,
                            id: Optional[str] = None,
                            name: Optional[str] = None,
                            provisioner_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProvisionerWebhookResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['authorityId'] = authority_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['provisionerId'] = provisioner_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('smallstep:index/getProvisionerWebhook:getProvisionerWebhook', __args__, opts=opts, typ=GetProvisionerWebhookResult, package_ref=_utilities.get_package()).value

    return AwaitableGetProvisionerWebhookResult(
        authority_id=pulumi.get(__ret__, 'authority_id'),
        cert_type=pulumi.get(__ret__, 'cert_type'),
        disable_tls_client_auth=pulumi.get(__ret__, 'disable_tls_client_auth'),
        id=pulumi.get(__ret__, 'id'),
        kind=pulumi.get(__ret__, 'kind'),
        name=pulumi.get(__ret__, 'name'),
        provisioner_id=pulumi.get(__ret__, 'provisioner_id'),
        server_type=pulumi.get(__ret__, 'server_type'),
        url=pulumi.get(__ret__, 'url'))
def get_provisioner_webhook_output(authority_id: Optional[pulumi.Input[str]] = None,
                                   id: Optional[pulumi.Input[Optional[str]]] = None,
                                   name: Optional[pulumi.Input[Optional[str]]] = None,
                                   provisioner_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProvisionerWebhookResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['authorityId'] = authority_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['provisionerId'] = provisioner_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('smallstep:index/getProvisionerWebhook:getProvisionerWebhook', __args__, opts=opts, typ=GetProvisionerWebhookResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetProvisionerWebhookResult(
        authority_id=pulumi.get(__response__, 'authority_id'),
        cert_type=pulumi.get(__response__, 'cert_type'),
        disable_tls_client_auth=pulumi.get(__response__, 'disable_tls_client_auth'),
        id=pulumi.get(__response__, 'id'),
        kind=pulumi.get(__response__, 'kind'),
        name=pulumi.get(__response__, 'name'),
        provisioner_id=pulumi.get(__response__, 'provisioner_id'),
        server_type=pulumi.get(__response__, 'server_type'),
        url=pulumi.get(__response__, 'url')))
