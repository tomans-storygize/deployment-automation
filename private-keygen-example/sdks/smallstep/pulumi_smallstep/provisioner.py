# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProvisionerArgs', 'Provisioner']

@pulumi.input_type
class ProvisionerArgs:
    def __init__(__self__, *,
                 authority_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 acme: Optional[pulumi.Input['ProvisionerAcmeArgs']] = None,
                 acme_attestation: Optional[pulumi.Input['ProvisionerAcmeAttestationArgs']] = None,
                 aws: Optional[pulumi.Input['ProvisionerAwsArgs']] = None,
                 azure: Optional[pulumi.Input['ProvisionerAzureArgs']] = None,
                 claims: Optional[pulumi.Input['ProvisionerClaimsArgs']] = None,
                 gcp: Optional[pulumi.Input['ProvisionerGcpArgs']] = None,
                 jwk: Optional[pulumi.Input['ProvisionerJwkArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oidc: Optional[pulumi.Input['ProvisionerOidcArgs']] = None,
                 options: Optional[pulumi.Input['ProvisionerOptionsArgs']] = None,
                 x5c: Optional[pulumi.Input['ProvisionerX5cArgs']] = None):
        """
        The set of arguments for constructing a Provisioner resource.
        :param pulumi.Input[str] authority_id: The UUID of the authority this provisioner is attached to
        :param pulumi.Input[str] type: The type of provisioner. Allowed values: `OIDC` `JWK` `ACME` `ACME_ATTESTATION` `X5C` `AWS` `GCP` `AZURE` `SCEP`
        :param pulumi.Input['ProvisionerAcmeArgs'] acme: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the [ACME
               protocol](https://smallstep.com/docs/step-ca/acme-basics/#acme-challenges). This object is required when type is `ACME`
               and is otherwise ignored.
        :param pulumi.Input['ProvisionerAcmeAttestationArgs'] acme_attestation: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the
               [device-attest-01 challenge of the ACME
               protocol](https://smallstep.com/blog/acme-managed-device-attestation-explained/). This object is required when type is
               `ACME_ATTESTATION` and is otherwise ignored.
        :param pulumi.Input['ProvisionerAwsArgs'] aws: The [AWS provisioner](https://smallstep.com/docs/step-ca/provisioners/#aws) grants a certificate to an Amazon EC2
               instance using the Instance Identity Document. This object is required when type is `AWS` and is otherwise ignored.
        :param pulumi.Input['ProvisionerAzureArgs'] azure: The [Azure provisioner](https://smallstep.com/docs/step-ca/provisioners/#azure) grants certificates to Microsoft Azure
               instances using the managed identities tokens. This object is required when type is `AZURE` and is otherwise ignored.
        :param pulumi.Input['ProvisionerClaimsArgs'] claims: A set of constraints configuring how this provisioner can be used to issue certificates.
        :param pulumi.Input['ProvisionerGcpArgs'] gcp: The [GCP provisioner](https://smallstep.com/docs/step-ca/provisioners/#gcp) grants a certificate to a Google Compute
               Engine instance using its identity token. At least one service account or project ID must be set. This object is
               required when type is `GCP` and is otherwise ignored.
        :param pulumi.Input['ProvisionerJwkArgs'] jwk: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#jwk) that uses public-key cryptography to sign and
               validate a JSON Web Token (JWT). This object is required when type is `JWK` and is otherwise ignored.
        :param pulumi.Input[str] name: The name of the provisioner.
        :param pulumi.Input['ProvisionerOidcArgs'] oidc: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#oauthoidc-single-sign-on) that is configured to trust
               and accept an OAuth provider's ID tokens for authentication. By default, the issued certificate will use the subject
               (sub) claim from the identity token as its subject. The value of the token's email claim is also included as an email
               SAN in the certificate. This object is required when type is `OIDC` and is otherwise ignored.
        :param pulumi.Input['ProvisionerOptionsArgs'] options: Options that apply when issuing certificates with this provisioner.
        :param pulumi.Input['ProvisionerX5cArgs'] x5c: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#x5c---x509-certificate) that authenticates a
               certificate request with an existing x509 certificate. This object is required when type is `X5C` and is otherwise
               ignored.
        """
        pulumi.set(__self__, "authority_id", authority_id)
        pulumi.set(__self__, "type", type)
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if acme_attestation is not None:
            pulumi.set(__self__, "acme_attestation", acme_attestation)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if jwk is not None:
            pulumi.set(__self__, "jwk", jwk)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oidc is not None:
            pulumi.set(__self__, "oidc", oidc)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if x5c is not None:
            pulumi.set(__self__, "x5c", x5c)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> pulumi.Input[str]:
        """
        The UUID of the authority this provisioner is attached to
        """
        return pulumi.get(self, "authority_id")

    @authority_id.setter
    def authority_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "authority_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of provisioner. Allowed values: `OIDC` `JWK` `ACME` `ACME_ATTESTATION` `X5C` `AWS` `GCP` `AZURE` `SCEP`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def acme(self) -> Optional[pulumi.Input['ProvisionerAcmeArgs']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the [ACME
        protocol](https://smallstep.com/docs/step-ca/acme-basics/#acme-challenges). This object is required when type is `ACME`
        and is otherwise ignored.
        """
        return pulumi.get(self, "acme")

    @acme.setter
    def acme(self, value: Optional[pulumi.Input['ProvisionerAcmeArgs']]):
        pulumi.set(self, "acme", value)

    @property
    @pulumi.getter(name="acmeAttestation")
    def acme_attestation(self) -> Optional[pulumi.Input['ProvisionerAcmeAttestationArgs']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the
        [device-attest-01 challenge of the ACME
        protocol](https://smallstep.com/blog/acme-managed-device-attestation-explained/). This object is required when type is
        `ACME_ATTESTATION` and is otherwise ignored.
        """
        return pulumi.get(self, "acme_attestation")

    @acme_attestation.setter
    def acme_attestation(self, value: Optional[pulumi.Input['ProvisionerAcmeAttestationArgs']]):
        pulumi.set(self, "acme_attestation", value)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ProvisionerAwsArgs']]:
        """
        The [AWS provisioner](https://smallstep.com/docs/step-ca/provisioners/#aws) grants a certificate to an Amazon EC2
        instance using the Instance Identity Document. This object is required when type is `AWS` and is otherwise ignored.
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ProvisionerAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['ProvisionerAzureArgs']]:
        """
        The [Azure provisioner](https://smallstep.com/docs/step-ca/provisioners/#azure) grants certificates to Microsoft Azure
        instances using the managed identities tokens. This object is required when type is `AZURE` and is otherwise ignored.
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['ProvisionerAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def claims(self) -> Optional[pulumi.Input['ProvisionerClaimsArgs']]:
        """
        A set of constraints configuring how this provisioner can be used to issue certificates.
        """
        return pulumi.get(self, "claims")

    @claims.setter
    def claims(self, value: Optional[pulumi.Input['ProvisionerClaimsArgs']]):
        pulumi.set(self, "claims", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['ProvisionerGcpArgs']]:
        """
        The [GCP provisioner](https://smallstep.com/docs/step-ca/provisioners/#gcp) grants a certificate to a Google Compute
        Engine instance using its identity token. At least one service account or project ID must be set. This object is
        required when type is `GCP` and is otherwise ignored.
        """
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['ProvisionerGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter
    def jwk(self) -> Optional[pulumi.Input['ProvisionerJwkArgs']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#jwk) that uses public-key cryptography to sign and
        validate a JSON Web Token (JWT). This object is required when type is `JWK` and is otherwise ignored.
        """
        return pulumi.get(self, "jwk")

    @jwk.setter
    def jwk(self, value: Optional[pulumi.Input['ProvisionerJwkArgs']]):
        pulumi.set(self, "jwk", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the provisioner.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def oidc(self) -> Optional[pulumi.Input['ProvisionerOidcArgs']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#oauthoidc-single-sign-on) that is configured to trust
        and accept an OAuth provider's ID tokens for authentication. By default, the issued certificate will use the subject
        (sub) claim from the identity token as its subject. The value of the token's email claim is also included as an email
        SAN in the certificate. This object is required when type is `OIDC` and is otherwise ignored.
        """
        return pulumi.get(self, "oidc")

    @oidc.setter
    def oidc(self, value: Optional[pulumi.Input['ProvisionerOidcArgs']]):
        pulumi.set(self, "oidc", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['ProvisionerOptionsArgs']]:
        """
        Options that apply when issuing certificates with this provisioner.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['ProvisionerOptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def x5c(self) -> Optional[pulumi.Input['ProvisionerX5cArgs']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#x5c---x509-certificate) that authenticates a
        certificate request with an existing x509 certificate. This object is required when type is `X5C` and is otherwise
        ignored.
        """
        return pulumi.get(self, "x5c")

    @x5c.setter
    def x5c(self, value: Optional[pulumi.Input['ProvisionerX5cArgs']]):
        pulumi.set(self, "x5c", value)


@pulumi.input_type
class _ProvisionerState:
    def __init__(__self__, *,
                 acme: Optional[pulumi.Input['ProvisionerAcmeArgs']] = None,
                 acme_attestation: Optional[pulumi.Input['ProvisionerAcmeAttestationArgs']] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 aws: Optional[pulumi.Input['ProvisionerAwsArgs']] = None,
                 azure: Optional[pulumi.Input['ProvisionerAzureArgs']] = None,
                 claims: Optional[pulumi.Input['ProvisionerClaimsArgs']] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 gcp: Optional[pulumi.Input['ProvisionerGcpArgs']] = None,
                 jwk: Optional[pulumi.Input['ProvisionerJwkArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oidc: Optional[pulumi.Input['ProvisionerOidcArgs']] = None,
                 options: Optional[pulumi.Input['ProvisionerOptionsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 x5c: Optional[pulumi.Input['ProvisionerX5cArgs']] = None):
        """
        Input properties used for looking up and filtering Provisioner resources.
        :param pulumi.Input['ProvisionerAcmeArgs'] acme: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the [ACME
               protocol](https://smallstep.com/docs/step-ca/acme-basics/#acme-challenges). This object is required when type is `ACME`
               and is otherwise ignored.
        :param pulumi.Input['ProvisionerAcmeAttestationArgs'] acme_attestation: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the
               [device-attest-01 challenge of the ACME
               protocol](https://smallstep.com/blog/acme-managed-device-attestation-explained/). This object is required when type is
               `ACME_ATTESTATION` and is otherwise ignored.
        :param pulumi.Input[str] authority_id: The UUID of the authority this provisioner is attached to
        :param pulumi.Input['ProvisionerAwsArgs'] aws: The [AWS provisioner](https://smallstep.com/docs/step-ca/provisioners/#aws) grants a certificate to an Amazon EC2
               instance using the Instance Identity Document. This object is required when type is `AWS` and is otherwise ignored.
        :param pulumi.Input['ProvisionerAzureArgs'] azure: The [Azure provisioner](https://smallstep.com/docs/step-ca/provisioners/#azure) grants certificates to Microsoft Azure
               instances using the managed identities tokens. This object is required when type is `AZURE` and is otherwise ignored.
        :param pulumi.Input['ProvisionerClaimsArgs'] claims: A set of constraints configuring how this provisioner can be used to issue certificates.
        :param pulumi.Input[str] created_at: Timestamp of when the provisioner was created in RFC 3339 format. Generated server-side.
        :param pulumi.Input['ProvisionerGcpArgs'] gcp: The [GCP provisioner](https://smallstep.com/docs/step-ca/provisioners/#gcp) grants a certificate to a Google Compute
               Engine instance using its identity token. At least one service account or project ID must be set. This object is
               required when type is `GCP` and is otherwise ignored.
        :param pulumi.Input['ProvisionerJwkArgs'] jwk: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#jwk) that uses public-key cryptography to sign and
               validate a JSON Web Token (JWT). This object is required when type is `JWK` and is otherwise ignored.
        :param pulumi.Input[str] name: The name of the provisioner.
        :param pulumi.Input['ProvisionerOidcArgs'] oidc: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#oauthoidc-single-sign-on) that is configured to trust
               and accept an OAuth provider's ID tokens for authentication. By default, the issued certificate will use the subject
               (sub) claim from the identity token as its subject. The value of the token's email claim is also included as an email
               SAN in the certificate. This object is required when type is `OIDC` and is otherwise ignored.
        :param pulumi.Input['ProvisionerOptionsArgs'] options: Options that apply when issuing certificates with this provisioner.
        :param pulumi.Input[str] type: The type of provisioner. Allowed values: `OIDC` `JWK` `ACME` `ACME_ATTESTATION` `X5C` `AWS` `GCP` `AZURE` `SCEP`
        :param pulumi.Input['ProvisionerX5cArgs'] x5c: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#x5c---x509-certificate) that authenticates a
               certificate request with an existing x509 certificate. This object is required when type is `X5C` and is otherwise
               ignored.
        """
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if acme_attestation is not None:
            pulumi.set(__self__, "acme_attestation", acme_attestation)
        if authority_id is not None:
            pulumi.set(__self__, "authority_id", authority_id)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if claims is not None:
            pulumi.set(__self__, "claims", claims)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if jwk is not None:
            pulumi.set(__self__, "jwk", jwk)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oidc is not None:
            pulumi.set(__self__, "oidc", oidc)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if x5c is not None:
            pulumi.set(__self__, "x5c", x5c)

    @property
    @pulumi.getter
    def acme(self) -> Optional[pulumi.Input['ProvisionerAcmeArgs']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the [ACME
        protocol](https://smallstep.com/docs/step-ca/acme-basics/#acme-challenges). This object is required when type is `ACME`
        and is otherwise ignored.
        """
        return pulumi.get(self, "acme")

    @acme.setter
    def acme(self, value: Optional[pulumi.Input['ProvisionerAcmeArgs']]):
        pulumi.set(self, "acme", value)

    @property
    @pulumi.getter(name="acmeAttestation")
    def acme_attestation(self) -> Optional[pulumi.Input['ProvisionerAcmeAttestationArgs']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the
        [device-attest-01 challenge of the ACME
        protocol](https://smallstep.com/blog/acme-managed-device-attestation-explained/). This object is required when type is
        `ACME_ATTESTATION` and is otherwise ignored.
        """
        return pulumi.get(self, "acme_attestation")

    @acme_attestation.setter
    def acme_attestation(self, value: Optional[pulumi.Input['ProvisionerAcmeAttestationArgs']]):
        pulumi.set(self, "acme_attestation", value)

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of the authority this provisioner is attached to
        """
        return pulumi.get(self, "authority_id")

    @authority_id.setter
    def authority_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authority_id", value)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ProvisionerAwsArgs']]:
        """
        The [AWS provisioner](https://smallstep.com/docs/step-ca/provisioners/#aws) grants a certificate to an Amazon EC2
        instance using the Instance Identity Document. This object is required when type is `AWS` and is otherwise ignored.
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ProvisionerAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['ProvisionerAzureArgs']]:
        """
        The [Azure provisioner](https://smallstep.com/docs/step-ca/provisioners/#azure) grants certificates to Microsoft Azure
        instances using the managed identities tokens. This object is required when type is `AZURE` and is otherwise ignored.
        """
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['ProvisionerAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter
    def claims(self) -> Optional[pulumi.Input['ProvisionerClaimsArgs']]:
        """
        A set of constraints configuring how this provisioner can be used to issue certificates.
        """
        return pulumi.get(self, "claims")

    @claims.setter
    def claims(self, value: Optional[pulumi.Input['ProvisionerClaimsArgs']]):
        pulumi.set(self, "claims", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp of when the provisioner was created in RFC 3339 format. Generated server-side.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['ProvisionerGcpArgs']]:
        """
        The [GCP provisioner](https://smallstep.com/docs/step-ca/provisioners/#gcp) grants a certificate to a Google Compute
        Engine instance using its identity token. At least one service account or project ID must be set. This object is
        required when type is `GCP` and is otherwise ignored.
        """
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['ProvisionerGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter
    def jwk(self) -> Optional[pulumi.Input['ProvisionerJwkArgs']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#jwk) that uses public-key cryptography to sign and
        validate a JSON Web Token (JWT). This object is required when type is `JWK` and is otherwise ignored.
        """
        return pulumi.get(self, "jwk")

    @jwk.setter
    def jwk(self, value: Optional[pulumi.Input['ProvisionerJwkArgs']]):
        pulumi.set(self, "jwk", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the provisioner.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def oidc(self) -> Optional[pulumi.Input['ProvisionerOidcArgs']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#oauthoidc-single-sign-on) that is configured to trust
        and accept an OAuth provider's ID tokens for authentication. By default, the issued certificate will use the subject
        (sub) claim from the identity token as its subject. The value of the token's email claim is also included as an email
        SAN in the certificate. This object is required when type is `OIDC` and is otherwise ignored.
        """
        return pulumi.get(self, "oidc")

    @oidc.setter
    def oidc(self, value: Optional[pulumi.Input['ProvisionerOidcArgs']]):
        pulumi.set(self, "oidc", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['ProvisionerOptionsArgs']]:
        """
        Options that apply when issuing certificates with this provisioner.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['ProvisionerOptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of provisioner. Allowed values: `OIDC` `JWK` `ACME` `ACME_ATTESTATION` `X5C` `AWS` `GCP` `AZURE` `SCEP`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def x5c(self) -> Optional[pulumi.Input['ProvisionerX5cArgs']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#x5c---x509-certificate) that authenticates a
        certificate request with an existing x509 certificate. This object is required when type is `X5C` and is otherwise
        ignored.
        """
        return pulumi.get(self, "x5c")

    @x5c.setter
    def x5c(self, value: Optional[pulumi.Input['ProvisionerX5cArgs']]):
        pulumi.set(self, "x5c", value)


class Provisioner(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acme: Optional[pulumi.Input[Union['ProvisionerAcmeArgs', 'ProvisionerAcmeArgsDict']]] = None,
                 acme_attestation: Optional[pulumi.Input[Union['ProvisionerAcmeAttestationArgs', 'ProvisionerAcmeAttestationArgsDict']]] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 aws: Optional[pulumi.Input[Union['ProvisionerAwsArgs', 'ProvisionerAwsArgsDict']]] = None,
                 azure: Optional[pulumi.Input[Union['ProvisionerAzureArgs', 'ProvisionerAzureArgsDict']]] = None,
                 claims: Optional[pulumi.Input[Union['ProvisionerClaimsArgs', 'ProvisionerClaimsArgsDict']]] = None,
                 gcp: Optional[pulumi.Input[Union['ProvisionerGcpArgs', 'ProvisionerGcpArgsDict']]] = None,
                 jwk: Optional[pulumi.Input[Union['ProvisionerJwkArgs', 'ProvisionerJwkArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oidc: Optional[pulumi.Input[Union['ProvisionerOidcArgs', 'ProvisionerOidcArgsDict']]] = None,
                 options: Optional[pulumi.Input[Union['ProvisionerOptionsArgs', 'ProvisionerOptionsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 x5c: Optional[pulumi.Input[Union['ProvisionerX5cArgs', 'ProvisionerX5cArgsDict']]] = None,
                 __props__=None):
        """
        Create a Provisioner resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ProvisionerAcmeArgs', 'ProvisionerAcmeArgsDict']] acme: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the [ACME
               protocol](https://smallstep.com/docs/step-ca/acme-basics/#acme-challenges). This object is required when type is `ACME`
               and is otherwise ignored.
        :param pulumi.Input[Union['ProvisionerAcmeAttestationArgs', 'ProvisionerAcmeAttestationArgsDict']] acme_attestation: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the
               [device-attest-01 challenge of the ACME
               protocol](https://smallstep.com/blog/acme-managed-device-attestation-explained/). This object is required when type is
               `ACME_ATTESTATION` and is otherwise ignored.
        :param pulumi.Input[str] authority_id: The UUID of the authority this provisioner is attached to
        :param pulumi.Input[Union['ProvisionerAwsArgs', 'ProvisionerAwsArgsDict']] aws: The [AWS provisioner](https://smallstep.com/docs/step-ca/provisioners/#aws) grants a certificate to an Amazon EC2
               instance using the Instance Identity Document. This object is required when type is `AWS` and is otherwise ignored.
        :param pulumi.Input[Union['ProvisionerAzureArgs', 'ProvisionerAzureArgsDict']] azure: The [Azure provisioner](https://smallstep.com/docs/step-ca/provisioners/#azure) grants certificates to Microsoft Azure
               instances using the managed identities tokens. This object is required when type is `AZURE` and is otherwise ignored.
        :param pulumi.Input[Union['ProvisionerClaimsArgs', 'ProvisionerClaimsArgsDict']] claims: A set of constraints configuring how this provisioner can be used to issue certificates.
        :param pulumi.Input[Union['ProvisionerGcpArgs', 'ProvisionerGcpArgsDict']] gcp: The [GCP provisioner](https://smallstep.com/docs/step-ca/provisioners/#gcp) grants a certificate to a Google Compute
               Engine instance using its identity token. At least one service account or project ID must be set. This object is
               required when type is `GCP` and is otherwise ignored.
        :param pulumi.Input[Union['ProvisionerJwkArgs', 'ProvisionerJwkArgsDict']] jwk: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#jwk) that uses public-key cryptography to sign and
               validate a JSON Web Token (JWT). This object is required when type is `JWK` and is otherwise ignored.
        :param pulumi.Input[str] name: The name of the provisioner.
        :param pulumi.Input[Union['ProvisionerOidcArgs', 'ProvisionerOidcArgsDict']] oidc: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#oauthoidc-single-sign-on) that is configured to trust
               and accept an OAuth provider's ID tokens for authentication. By default, the issued certificate will use the subject
               (sub) claim from the identity token as its subject. The value of the token's email claim is also included as an email
               SAN in the certificate. This object is required when type is `OIDC` and is otherwise ignored.
        :param pulumi.Input[Union['ProvisionerOptionsArgs', 'ProvisionerOptionsArgsDict']] options: Options that apply when issuing certificates with this provisioner.
        :param pulumi.Input[str] type: The type of provisioner. Allowed values: `OIDC` `JWK` `ACME` `ACME_ATTESTATION` `X5C` `AWS` `GCP` `AZURE` `SCEP`
        :param pulumi.Input[Union['ProvisionerX5cArgs', 'ProvisionerX5cArgsDict']] x5c: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#x5c---x509-certificate) that authenticates a
               certificate request with an existing x509 certificate. This object is required when type is `X5C` and is otherwise
               ignored.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProvisionerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Provisioner resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProvisionerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProvisionerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acme: Optional[pulumi.Input[Union['ProvisionerAcmeArgs', 'ProvisionerAcmeArgsDict']]] = None,
                 acme_attestation: Optional[pulumi.Input[Union['ProvisionerAcmeAttestationArgs', 'ProvisionerAcmeAttestationArgsDict']]] = None,
                 authority_id: Optional[pulumi.Input[str]] = None,
                 aws: Optional[pulumi.Input[Union['ProvisionerAwsArgs', 'ProvisionerAwsArgsDict']]] = None,
                 azure: Optional[pulumi.Input[Union['ProvisionerAzureArgs', 'ProvisionerAzureArgsDict']]] = None,
                 claims: Optional[pulumi.Input[Union['ProvisionerClaimsArgs', 'ProvisionerClaimsArgsDict']]] = None,
                 gcp: Optional[pulumi.Input[Union['ProvisionerGcpArgs', 'ProvisionerGcpArgsDict']]] = None,
                 jwk: Optional[pulumi.Input[Union['ProvisionerJwkArgs', 'ProvisionerJwkArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oidc: Optional[pulumi.Input[Union['ProvisionerOidcArgs', 'ProvisionerOidcArgsDict']]] = None,
                 options: Optional[pulumi.Input[Union['ProvisionerOptionsArgs', 'ProvisionerOptionsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 x5c: Optional[pulumi.Input[Union['ProvisionerX5cArgs', 'ProvisionerX5cArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProvisionerArgs.__new__(ProvisionerArgs)

            __props__.__dict__["acme"] = acme
            __props__.__dict__["acme_attestation"] = acme_attestation
            if authority_id is None and not opts.urn:
                raise TypeError("Missing required property 'authority_id'")
            __props__.__dict__["authority_id"] = authority_id
            __props__.__dict__["aws"] = aws
            __props__.__dict__["azure"] = azure
            __props__.__dict__["claims"] = claims
            __props__.__dict__["gcp"] = gcp
            __props__.__dict__["jwk"] = jwk
            __props__.__dict__["name"] = name
            __props__.__dict__["oidc"] = oidc
            __props__.__dict__["options"] = options
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["x5c"] = x5c
            __props__.__dict__["created_at"] = None
        super(Provisioner, __self__).__init__(
            'smallstep:index/provisioner:Provisioner',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acme: Optional[pulumi.Input[Union['ProvisionerAcmeArgs', 'ProvisionerAcmeArgsDict']]] = None,
            acme_attestation: Optional[pulumi.Input[Union['ProvisionerAcmeAttestationArgs', 'ProvisionerAcmeAttestationArgsDict']]] = None,
            authority_id: Optional[pulumi.Input[str]] = None,
            aws: Optional[pulumi.Input[Union['ProvisionerAwsArgs', 'ProvisionerAwsArgsDict']]] = None,
            azure: Optional[pulumi.Input[Union['ProvisionerAzureArgs', 'ProvisionerAzureArgsDict']]] = None,
            claims: Optional[pulumi.Input[Union['ProvisionerClaimsArgs', 'ProvisionerClaimsArgsDict']]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            gcp: Optional[pulumi.Input[Union['ProvisionerGcpArgs', 'ProvisionerGcpArgsDict']]] = None,
            jwk: Optional[pulumi.Input[Union['ProvisionerJwkArgs', 'ProvisionerJwkArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            oidc: Optional[pulumi.Input[Union['ProvisionerOidcArgs', 'ProvisionerOidcArgsDict']]] = None,
            options: Optional[pulumi.Input[Union['ProvisionerOptionsArgs', 'ProvisionerOptionsArgsDict']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            x5c: Optional[pulumi.Input[Union['ProvisionerX5cArgs', 'ProvisionerX5cArgsDict']]] = None) -> 'Provisioner':
        """
        Get an existing Provisioner resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ProvisionerAcmeArgs', 'ProvisionerAcmeArgsDict']] acme: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the [ACME
               protocol](https://smallstep.com/docs/step-ca/acme-basics/#acme-challenges). This object is required when type is `ACME`
               and is otherwise ignored.
        :param pulumi.Input[Union['ProvisionerAcmeAttestationArgs', 'ProvisionerAcmeAttestationArgsDict']] acme_attestation: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the
               [device-attest-01 challenge of the ACME
               protocol](https://smallstep.com/blog/acme-managed-device-attestation-explained/). This object is required when type is
               `ACME_ATTESTATION` and is otherwise ignored.
        :param pulumi.Input[str] authority_id: The UUID of the authority this provisioner is attached to
        :param pulumi.Input[Union['ProvisionerAwsArgs', 'ProvisionerAwsArgsDict']] aws: The [AWS provisioner](https://smallstep.com/docs/step-ca/provisioners/#aws) grants a certificate to an Amazon EC2
               instance using the Instance Identity Document. This object is required when type is `AWS` and is otherwise ignored.
        :param pulumi.Input[Union['ProvisionerAzureArgs', 'ProvisionerAzureArgsDict']] azure: The [Azure provisioner](https://smallstep.com/docs/step-ca/provisioners/#azure) grants certificates to Microsoft Azure
               instances using the managed identities tokens. This object is required when type is `AZURE` and is otherwise ignored.
        :param pulumi.Input[Union['ProvisionerClaimsArgs', 'ProvisionerClaimsArgsDict']] claims: A set of constraints configuring how this provisioner can be used to issue certificates.
        :param pulumi.Input[str] created_at: Timestamp of when the provisioner was created in RFC 3339 format. Generated server-side.
        :param pulumi.Input[Union['ProvisionerGcpArgs', 'ProvisionerGcpArgsDict']] gcp: The [GCP provisioner](https://smallstep.com/docs/step-ca/provisioners/#gcp) grants a certificate to a Google Compute
               Engine instance using its identity token. At least one service account or project ID must be set. This object is
               required when type is `GCP` and is otherwise ignored.
        :param pulumi.Input[Union['ProvisionerJwkArgs', 'ProvisionerJwkArgsDict']] jwk: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#jwk) that uses public-key cryptography to sign and
               validate a JSON Web Token (JWT). This object is required when type is `JWK` and is otherwise ignored.
        :param pulumi.Input[str] name: The name of the provisioner.
        :param pulumi.Input[Union['ProvisionerOidcArgs', 'ProvisionerOidcArgsDict']] oidc: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#oauthoidc-single-sign-on) that is configured to trust
               and accept an OAuth provider's ID tokens for authentication. By default, the issued certificate will use the subject
               (sub) claim from the identity token as its subject. The value of the token's email claim is also included as an email
               SAN in the certificate. This object is required when type is `OIDC` and is otherwise ignored.
        :param pulumi.Input[Union['ProvisionerOptionsArgs', 'ProvisionerOptionsArgsDict']] options: Options that apply when issuing certificates with this provisioner.
        :param pulumi.Input[str] type: The type of provisioner. Allowed values: `OIDC` `JWK` `ACME` `ACME_ATTESTATION` `X5C` `AWS` `GCP` `AZURE` `SCEP`
        :param pulumi.Input[Union['ProvisionerX5cArgs', 'ProvisionerX5cArgsDict']] x5c: A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#x5c---x509-certificate) that authenticates a
               certificate request with an existing x509 certificate. This object is required when type is `X5C` and is otherwise
               ignored.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProvisionerState.__new__(_ProvisionerState)

        __props__.__dict__["acme"] = acme
        __props__.__dict__["acme_attestation"] = acme_attestation
        __props__.__dict__["authority_id"] = authority_id
        __props__.__dict__["aws"] = aws
        __props__.__dict__["azure"] = azure
        __props__.__dict__["claims"] = claims
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["gcp"] = gcp
        __props__.__dict__["jwk"] = jwk
        __props__.__dict__["name"] = name
        __props__.__dict__["oidc"] = oidc
        __props__.__dict__["options"] = options
        __props__.__dict__["type"] = type
        __props__.__dict__["x5c"] = x5c
        return Provisioner(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acme(self) -> pulumi.Output[Optional['outputs.ProvisionerAcme']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the [ACME
        protocol](https://smallstep.com/docs/step-ca/acme-basics/#acme-challenges). This object is required when type is `ACME`
        and is otherwise ignored.
        """
        return pulumi.get(self, "acme")

    @property
    @pulumi.getter(name="acmeAttestation")
    def acme_attestation(self) -> pulumi.Output[Optional['outputs.ProvisionerAcmeAttestation']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the
        [device-attest-01 challenge of the ACME
        protocol](https://smallstep.com/blog/acme-managed-device-attestation-explained/). This object is required when type is
        `ACME_ATTESTATION` and is otherwise ignored.
        """
        return pulumi.get(self, "acme_attestation")

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> pulumi.Output[str]:
        """
        The UUID of the authority this provisioner is attached to
        """
        return pulumi.get(self, "authority_id")

    @property
    @pulumi.getter
    def aws(self) -> pulumi.Output[Optional['outputs.ProvisionerAws']]:
        """
        The [AWS provisioner](https://smallstep.com/docs/step-ca/provisioners/#aws) grants a certificate to an Amazon EC2
        instance using the Instance Identity Document. This object is required when type is `AWS` and is otherwise ignored.
        """
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> pulumi.Output[Optional['outputs.ProvisionerAzure']]:
        """
        The [Azure provisioner](https://smallstep.com/docs/step-ca/provisioners/#azure) grants certificates to Microsoft Azure
        instances using the managed identities tokens. This object is required when type is `AZURE` and is otherwise ignored.
        """
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def claims(self) -> pulumi.Output[Optional['outputs.ProvisionerClaims']]:
        """
        A set of constraints configuring how this provisioner can be used to issue certificates.
        """
        return pulumi.get(self, "claims")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Timestamp of when the provisioner was created in RFC 3339 format. Generated server-side.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def gcp(self) -> pulumi.Output[Optional['outputs.ProvisionerGcp']]:
        """
        The [GCP provisioner](https://smallstep.com/docs/step-ca/provisioners/#gcp) grants a certificate to a Google Compute
        Engine instance using its identity token. At least one service account or project ID must be set. This object is
        required when type is `GCP` and is otherwise ignored.
        """
        return pulumi.get(self, "gcp")

    @property
    @pulumi.getter
    def jwk(self) -> pulumi.Output[Optional['outputs.ProvisionerJwk']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#jwk) that uses public-key cryptography to sign and
        validate a JSON Web Token (JWT). This object is required when type is `JWK` and is otherwise ignored.
        """
        return pulumi.get(self, "jwk")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the provisioner.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def oidc(self) -> pulumi.Output[Optional['outputs.ProvisionerOidc']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#oauthoidc-single-sign-on) that is configured to trust
        and accept an OAuth provider's ID tokens for authentication. By default, the issued certificate will use the subject
        (sub) claim from the identity token as its subject. The value of the token's email claim is also included as an email
        SAN in the certificate. This object is required when type is `OIDC` and is otherwise ignored.
        """
        return pulumi.get(self, "oidc")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[Optional['outputs.ProvisionerOptions']]:
        """
        Options that apply when issuing certificates with this provisioner.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of provisioner. Allowed values: `OIDC` `JWK` `ACME` `ACME_ATTESTATION` `X5C` `AWS` `GCP` `AZURE` `SCEP`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def x5c(self) -> pulumi.Output[Optional['outputs.ProvisionerX5c']]:
        """
        A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#x5c---x509-certificate) that authenticates a
        certificate request with an existing x509 certificate. This object is required when type is `X5C` and is otherwise
        ignored.
        """
        return pulumi.get(self, "x5c")

