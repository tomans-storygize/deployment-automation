# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetProvisionerResult',
    'AwaitableGetProvisionerResult',
    'get_provisioner',
    'get_provisioner_output',
]

@pulumi.output_type
class GetProvisionerResult:
    """
    A collection of values returned by getProvisioner.
    """
    def __init__(__self__, acme=None, acme_attestation=None, authority_id=None, aws=None, azure=None, claims=None, created_at=None, gcp=None, id=None, jwk=None, name=None, oidc=None, options=None, type=None, x5c=None):
        if acme and not isinstance(acme, dict):
            raise TypeError("Expected argument 'acme' to be a dict")
        pulumi.set(__self__, "acme", acme)
        if acme_attestation and not isinstance(acme_attestation, dict):
            raise TypeError("Expected argument 'acme_attestation' to be a dict")
        pulumi.set(__self__, "acme_attestation", acme_attestation)
        if authority_id and not isinstance(authority_id, str):
            raise TypeError("Expected argument 'authority_id' to be a str")
        pulumi.set(__self__, "authority_id", authority_id)
        if aws and not isinstance(aws, dict):
            raise TypeError("Expected argument 'aws' to be a dict")
        pulumi.set(__self__, "aws", aws)
        if azure and not isinstance(azure, dict):
            raise TypeError("Expected argument 'azure' to be a dict")
        pulumi.set(__self__, "azure", azure)
        if claims and not isinstance(claims, dict):
            raise TypeError("Expected argument 'claims' to be a dict")
        pulumi.set(__self__, "claims", claims)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if gcp and not isinstance(gcp, dict):
            raise TypeError("Expected argument 'gcp' to be a dict")
        pulumi.set(__self__, "gcp", gcp)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if jwk and not isinstance(jwk, dict):
            raise TypeError("Expected argument 'jwk' to be a dict")
        pulumi.set(__self__, "jwk", jwk)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if oidc and not isinstance(oidc, dict):
            raise TypeError("Expected argument 'oidc' to be a dict")
        pulumi.set(__self__, "oidc", oidc)
        if options and not isinstance(options, dict):
            raise TypeError("Expected argument 'options' to be a dict")
        pulumi.set(__self__, "options", options)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if x5c and not isinstance(x5c, dict):
            raise TypeError("Expected argument 'x5c' to be a dict")
        pulumi.set(__self__, "x5c", x5c)

    @property
    @pulumi.getter
    def acme(self) -> 'outputs.GetProvisionerAcmeResult':
        return pulumi.get(self, "acme")

    @property
    @pulumi.getter(name="acmeAttestation")
    def acme_attestation(self) -> 'outputs.GetProvisionerAcmeAttestationResult':
        return pulumi.get(self, "acme_attestation")

    @property
    @pulumi.getter(name="authorityId")
    def authority_id(self) -> str:
        return pulumi.get(self, "authority_id")

    @property
    @pulumi.getter
    def aws(self) -> 'outputs.GetProvisionerAwsResult':
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter
    def azure(self) -> 'outputs.GetProvisionerAzureResult':
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter
    def claims(self) -> 'outputs.GetProvisionerClaimsResult':
        return pulumi.get(self, "claims")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def gcp(self) -> 'outputs.GetProvisionerGcpResult':
        return pulumi.get(self, "gcp")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def jwk(self) -> 'outputs.GetProvisionerJwkResult':
        return pulumi.get(self, "jwk")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def oidc(self) -> 'outputs.GetProvisionerOidcResult':
        return pulumi.get(self, "oidc")

    @property
    @pulumi.getter
    def options(self) -> 'outputs.GetProvisionerOptionsResult':
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def x5c(self) -> 'outputs.GetProvisionerX5cResult':
        return pulumi.get(self, "x5c")


class AwaitableGetProvisionerResult(GetProvisionerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProvisionerResult(
            acme=self.acme,
            acme_attestation=self.acme_attestation,
            authority_id=self.authority_id,
            aws=self.aws,
            azure=self.azure,
            claims=self.claims,
            created_at=self.created_at,
            gcp=self.gcp,
            id=self.id,
            jwk=self.jwk,
            name=self.name,
            oidc=self.oidc,
            options=self.options,
            type=self.type,
            x5c=self.x5c)


def get_provisioner(authority_id: Optional[str] = None,
                    id: Optional[str] = None,
                    name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProvisionerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['authorityId'] = authority_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('smallstep:index/getProvisioner:getProvisioner', __args__, opts=opts, typ=GetProvisionerResult, package_ref=_utilities.get_package()).value

    return AwaitableGetProvisionerResult(
        acme=pulumi.get(__ret__, 'acme'),
        acme_attestation=pulumi.get(__ret__, 'acme_attestation'),
        authority_id=pulumi.get(__ret__, 'authority_id'),
        aws=pulumi.get(__ret__, 'aws'),
        azure=pulumi.get(__ret__, 'azure'),
        claims=pulumi.get(__ret__, 'claims'),
        created_at=pulumi.get(__ret__, 'created_at'),
        gcp=pulumi.get(__ret__, 'gcp'),
        id=pulumi.get(__ret__, 'id'),
        jwk=pulumi.get(__ret__, 'jwk'),
        name=pulumi.get(__ret__, 'name'),
        oidc=pulumi.get(__ret__, 'oidc'),
        options=pulumi.get(__ret__, 'options'),
        type=pulumi.get(__ret__, 'type'),
        x5c=pulumi.get(__ret__, 'x5c'))
def get_provisioner_output(authority_id: Optional[pulumi.Input[str]] = None,
                           id: Optional[pulumi.Input[Optional[str]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProvisionerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['authorityId'] = authority_id
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('smallstep:index/getProvisioner:getProvisioner', __args__, opts=opts, typ=GetProvisionerResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetProvisionerResult(
        acme=pulumi.get(__response__, 'acme'),
        acme_attestation=pulumi.get(__response__, 'acme_attestation'),
        authority_id=pulumi.get(__response__, 'authority_id'),
        aws=pulumi.get(__response__, 'aws'),
        azure=pulumi.get(__response__, 'azure'),
        claims=pulumi.get(__response__, 'claims'),
        created_at=pulumi.get(__response__, 'created_at'),
        gcp=pulumi.get(__response__, 'gcp'),
        id=pulumi.get(__response__, 'id'),
        jwk=pulumi.get(__response__, 'jwk'),
        name=pulumi.get(__response__, 'name'),
        oidc=pulumi.get(__response__, 'oidc'),
        options=pulumi.get(__response__, 'options'),
        type=pulumi.get(__response__, 'type'),
        x5c=pulumi.get(__response__, 'x5c')))
